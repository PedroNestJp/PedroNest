
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model usuarios
 * 
 */
export type usuarios = {
  id: number
  nomeCompleto: string
  email: string | null
  senha: string | null
  telefone: string | null
  cpf: string | null
  dataNascimento: Date | null
}

/**
 * Model enderecos
 * 
 */
export type enderecos = {
  id: number
  logradouro: string
  cep: string | null
  numero: number
  bairro: string | null
  complemento: string | null
  cidades: string | null
  estado: string | null
  usuarioId: number
}

/**
 * Model pedidos
 * 
 */
export type pedidos = {
  id: number
  quantidadeProdutos: number
  numerodoPedido: number
}

/**
 * Model produtos
 * 
 */
export type produtos = {
  id: number
  nome: string
  descricao: string | null
  tipo: string | null
  validade: Date | null
  garantia: string | null
  preco: number | null
}

/**
 * Model PedidosProdutos
 * 
 */
export type PedidosProdutos = {
  id: number
  idProduto: number
  idPedido: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuarios.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuarios.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.usuarios`: Exposes CRUD operations for the **usuarios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuarios.findMany()
    * ```
    */
  get usuarios(): Prisma.usuariosDelegate<GlobalReject>;

  /**
   * `prisma.enderecos`: Exposes CRUD operations for the **enderecos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Enderecos
    * const enderecos = await prisma.enderecos.findMany()
    * ```
    */
  get enderecos(): Prisma.enderecosDelegate<GlobalReject>;

  /**
   * `prisma.pedidos`: Exposes CRUD operations for the **pedidos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pedidos
    * const pedidos = await prisma.pedidos.findMany()
    * ```
    */
  get pedidos(): Prisma.pedidosDelegate<GlobalReject>;

  /**
   * `prisma.produtos`: Exposes CRUD operations for the **produtos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produtos
    * const produtos = await prisma.produtos.findMany()
    * ```
    */
  get produtos(): Prisma.produtosDelegate<GlobalReject>;

  /**
   * `prisma.pedidosProdutos`: Exposes CRUD operations for the **PedidosProdutos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PedidosProdutos
    * const pedidosProdutos = await prisma.pedidosProdutos.findMany()
    * ```
    */
  get pedidosProdutos(): Prisma.PedidosProdutosDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.4.0
   * Query Engine version: f352a33b70356f46311da8b00d83386dd9f145d6
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    usuarios: 'usuarios',
    enderecos: 'enderecos',
    pedidos: 'pedidos',
    produtos: 'produtos',
    PedidosProdutos: 'PedidosProdutos'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuariosCountOutputType
   */


  export type UsuariosCountOutputType = {
    enderecos: number
  }

  export type UsuariosCountOutputTypeSelect = {
    enderecos?: boolean
  }

  export type UsuariosCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UsuariosCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UsuariosCountOutputType
    : S extends undefined
    ? never
    : S extends UsuariosCountOutputTypeArgs
    ?'include' extends U
    ? UsuariosCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UsuariosCountOutputType ? UsuariosCountOutputType[P] : never
  } 
    : UsuariosCountOutputType
  : UsuariosCountOutputType




  // Custom InputTypes

  /**
   * UsuariosCountOutputType without action
   */
  export type UsuariosCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsuariosCountOutputType
     * 
    **/
    select?: UsuariosCountOutputTypeSelect | null
  }



  /**
   * Count Type PedidosCountOutputType
   */


  export type PedidosCountOutputType = {
    produtos: number
  }

  export type PedidosCountOutputTypeSelect = {
    produtos?: boolean
  }

  export type PedidosCountOutputTypeGetPayload<
    S extends boolean | null | undefined | PedidosCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? PedidosCountOutputType
    : S extends undefined
    ? never
    : S extends PedidosCountOutputTypeArgs
    ?'include' extends U
    ? PedidosCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof PedidosCountOutputType ? PedidosCountOutputType[P] : never
  } 
    : PedidosCountOutputType
  : PedidosCountOutputType




  // Custom InputTypes

  /**
   * PedidosCountOutputType without action
   */
  export type PedidosCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PedidosCountOutputType
     * 
    **/
    select?: PedidosCountOutputTypeSelect | null
  }



  /**
   * Count Type ProdutosCountOutputType
   */


  export type ProdutosCountOutputType = {
    pedidos: number
  }

  export type ProdutosCountOutputTypeSelect = {
    pedidos?: boolean
  }

  export type ProdutosCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ProdutosCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ProdutosCountOutputType
    : S extends undefined
    ? never
    : S extends ProdutosCountOutputTypeArgs
    ?'include' extends U
    ? ProdutosCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ProdutosCountOutputType ? ProdutosCountOutputType[P] : never
  } 
    : ProdutosCountOutputType
  : ProdutosCountOutputType




  // Custom InputTypes

  /**
   * ProdutosCountOutputType without action
   */
  export type ProdutosCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProdutosCountOutputType
     * 
    **/
    select?: ProdutosCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model usuarios
   */


  export type AggregateUsuarios = {
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  export type UsuariosAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuariosSumAggregateOutputType = {
    id: number | null
  }

  export type UsuariosMinAggregateOutputType = {
    id: number | null
    nomeCompleto: string | null
    email: string | null
    senha: string | null
    telefone: string | null
    cpf: string | null
    dataNascimento: Date | null
  }

  export type UsuariosMaxAggregateOutputType = {
    id: number | null
    nomeCompleto: string | null
    email: string | null
    senha: string | null
    telefone: string | null
    cpf: string | null
    dataNascimento: Date | null
  }

  export type UsuariosCountAggregateOutputType = {
    id: number
    nomeCompleto: number
    email: number
    senha: number
    telefone: number
    cpf: number
    dataNascimento: number
    _all: number
  }


  export type UsuariosAvgAggregateInputType = {
    id?: true
  }

  export type UsuariosSumAggregateInputType = {
    id?: true
  }

  export type UsuariosMinAggregateInputType = {
    id?: true
    nomeCompleto?: true
    email?: true
    senha?: true
    telefone?: true
    cpf?: true
    dataNascimento?: true
  }

  export type UsuariosMaxAggregateInputType = {
    id?: true
    nomeCompleto?: true
    email?: true
    senha?: true
    telefone?: true
    cpf?: true
    dataNascimento?: true
  }

  export type UsuariosCountAggregateInputType = {
    id?: true
    nomeCompleto?: true
    email?: true
    senha?: true
    telefone?: true
    cpf?: true
    dataNascimento?: true
    _all?: true
  }

  export type UsuariosAggregateArgs = {
    /**
     * Filter which usuarios to aggregate.
     * 
    **/
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     * 
    **/
    orderBy?: Enumerable<usuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned usuarios
    **/
    _count?: true | UsuariosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuariosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuariosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuariosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuariosMaxAggregateInputType
  }

  export type GetUsuariosAggregateType<T extends UsuariosAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuarios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuarios[P]>
      : GetScalarType<T[P], AggregateUsuarios[P]>
  }




  export type UsuariosGroupByArgs = {
    where?: usuariosWhereInput
    orderBy?: Enumerable<usuariosOrderByWithAggregationInput>
    by: Array<UsuariosScalarFieldEnum>
    having?: usuariosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuariosCountAggregateInputType | true
    _avg?: UsuariosAvgAggregateInputType
    _sum?: UsuariosSumAggregateInputType
    _min?: UsuariosMinAggregateInputType
    _max?: UsuariosMaxAggregateInputType
  }


  export type UsuariosGroupByOutputType = {
    id: number
    nomeCompleto: string
    email: string | null
    senha: string | null
    telefone: string | null
    cpf: string | null
    dataNascimento: Date | null
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  type GetUsuariosGroupByPayload<T extends UsuariosGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsuariosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuariosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
            : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
        }
      >
    >


  export type usuariosSelect = {
    id?: boolean
    nomeCompleto?: boolean
    email?: boolean
    senha?: boolean
    telefone?: boolean
    cpf?: boolean
    dataNascimento?: boolean
    enderecos?: boolean | enderecosFindManyArgs
    _count?: boolean | UsuariosCountOutputTypeArgs
  }

  export type usuariosInclude = {
    enderecos?: boolean | enderecosFindManyArgs
    _count?: boolean | UsuariosCountOutputTypeArgs
  }

  export type usuariosGetPayload<
    S extends boolean | null | undefined | usuariosArgs,
    U = keyof S
      > = S extends true
        ? usuarios
    : S extends undefined
    ? never
    : S extends usuariosArgs | usuariosFindManyArgs
    ?'include' extends U
    ? usuarios  & {
    [P in TrueKeys<S['include']>]:
        P extends 'enderecos' ? Array < enderecosGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? UsuariosCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'enderecos' ? Array < enderecosGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? UsuariosCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof usuarios ? usuarios[P] : never
  } 
    : usuarios
  : usuarios


  type usuariosCountArgs = Merge<
    Omit<usuariosFindManyArgs, 'select' | 'include'> & {
      select?: UsuariosCountAggregateInputType | true
    }
  >

  export interface usuariosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Usuarios that matches the filter.
     * @param {usuariosFindUniqueArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usuariosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usuariosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'usuarios'> extends True ? CheckSelect<T, Prisma__usuariosClient<usuarios>, Prisma__usuariosClient<usuariosGetPayload<T>>> : CheckSelect<T, Prisma__usuariosClient<usuarios | null, null>, Prisma__usuariosClient<usuariosGetPayload<T> | null, null>>

    /**
     * Find the first Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindFirstArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usuariosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usuariosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'usuarios'> extends True ? CheckSelect<T, Prisma__usuariosClient<usuarios>, Prisma__usuariosClient<usuariosGetPayload<T>>> : CheckSelect<T, Prisma__usuariosClient<usuarios | null, null>, Prisma__usuariosClient<usuariosGetPayload<T> | null, null>>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuarios.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuarios.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuariosWithIdOnly = await prisma.usuarios.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usuariosFindManyArgs>(
      args?: SelectSubset<T, usuariosFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<usuarios>>, PrismaPromise<Array<usuariosGetPayload<T>>>>

    /**
     * Create a Usuarios.
     * @param {usuariosCreateArgs} args - Arguments to create a Usuarios.
     * @example
     * // Create one Usuarios
     * const Usuarios = await prisma.usuarios.create({
     *   data: {
     *     // ... data to create a Usuarios
     *   }
     * })
     * 
    **/
    create<T extends usuariosCreateArgs>(
      args: SelectSubset<T, usuariosCreateArgs>
    ): CheckSelect<T, Prisma__usuariosClient<usuarios>, Prisma__usuariosClient<usuariosGetPayload<T>>>

    /**
     * Create many Usuarios.
     *     @param {usuariosCreateManyArgs} args - Arguments to create many Usuarios.
     *     @example
     *     // Create many Usuarios
     *     const usuarios = await prisma.usuarios.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usuariosCreateManyArgs>(
      args?: SelectSubset<T, usuariosCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Usuarios.
     * @param {usuariosDeleteArgs} args - Arguments to delete one Usuarios.
     * @example
     * // Delete one Usuarios
     * const Usuarios = await prisma.usuarios.delete({
     *   where: {
     *     // ... filter to delete one Usuarios
     *   }
     * })
     * 
    **/
    delete<T extends usuariosDeleteArgs>(
      args: SelectSubset<T, usuariosDeleteArgs>
    ): CheckSelect<T, Prisma__usuariosClient<usuarios>, Prisma__usuariosClient<usuariosGetPayload<T>>>

    /**
     * Update one Usuarios.
     * @param {usuariosUpdateArgs} args - Arguments to update one Usuarios.
     * @example
     * // Update one Usuarios
     * const usuarios = await prisma.usuarios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usuariosUpdateArgs>(
      args: SelectSubset<T, usuariosUpdateArgs>
    ): CheckSelect<T, Prisma__usuariosClient<usuarios>, Prisma__usuariosClient<usuariosGetPayload<T>>>

    /**
     * Delete zero or more Usuarios.
     * @param {usuariosDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuarios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usuariosDeleteManyArgs>(
      args?: SelectSubset<T, usuariosDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuarios = await prisma.usuarios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usuariosUpdateManyArgs>(
      args: SelectSubset<T, usuariosUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuarios.
     * @param {usuariosUpsertArgs} args - Arguments to update or create a Usuarios.
     * @example
     * // Update or create a Usuarios
     * const usuarios = await prisma.usuarios.upsert({
     *   create: {
     *     // ... data to create a Usuarios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuarios we want to update
     *   }
     * })
    **/
    upsert<T extends usuariosUpsertArgs>(
      args: SelectSubset<T, usuariosUpsertArgs>
    ): CheckSelect<T, Prisma__usuariosClient<usuarios>, Prisma__usuariosClient<usuariosGetPayload<T>>>

    /**
     * Find one Usuarios that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {usuariosFindUniqueOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usuariosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, usuariosFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__usuariosClient<usuarios>, Prisma__usuariosClient<usuariosGetPayload<T>>>

    /**
     * Find the first Usuarios that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindFirstOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usuariosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, usuariosFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__usuariosClient<usuarios>, Prisma__usuariosClient<usuariosGetPayload<T>>>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuarios.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends usuariosCountArgs>(
      args?: Subset<T, usuariosCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuariosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuariosAggregateArgs>(args: Subset<T, UsuariosAggregateArgs>): PrismaPromise<GetUsuariosAggregateType<T>>

    /**
     * Group by Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuariosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuariosGroupByArgs['orderBy'] }
        : { orderBy?: UsuariosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuariosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuariosGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for usuarios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usuariosClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    enderecos<T extends enderecosFindManyArgs = {}>(args?: Subset<T, enderecosFindManyArgs>): CheckSelect<T, PrismaPromise<Array<enderecos>| Null>, PrismaPromise<Array<enderecosGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * usuarios base type for findUnique actions
   */
  export type usuariosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the usuarios
     * 
    **/
    select?: usuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuariosInclude | null
    /**
     * Filter, which usuarios to fetch.
     * 
    **/
    where: usuariosWhereUniqueInput
  }

  /**
   * usuarios: findUnique
   */
  export interface usuariosFindUniqueArgs extends usuariosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * usuarios base type for findFirst actions
   */
  export type usuariosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the usuarios
     * 
    **/
    select?: usuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuariosInclude | null
    /**
     * Filter, which usuarios to fetch.
     * 
    **/
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     * 
    **/
    orderBy?: Enumerable<usuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     * 
    **/
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     * 
    **/
    distinct?: Enumerable<UsuariosScalarFieldEnum>
  }

  /**
   * usuarios: findFirst
   */
  export interface usuariosFindFirstArgs extends usuariosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * usuarios findMany
   */
  export type usuariosFindManyArgs = {
    /**
     * Select specific fields to fetch from the usuarios
     * 
    **/
    select?: usuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuariosInclude | null
    /**
     * Filter, which usuarios to fetch.
     * 
    **/
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     * 
    **/
    orderBy?: Enumerable<usuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing usuarios.
     * 
    **/
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsuariosScalarFieldEnum>
  }


  /**
   * usuarios create
   */
  export type usuariosCreateArgs = {
    /**
     * Select specific fields to fetch from the usuarios
     * 
    **/
    select?: usuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuariosInclude | null
    /**
     * The data needed to create a usuarios.
     * 
    **/
    data: XOR<usuariosCreateInput, usuariosUncheckedCreateInput>
  }


  /**
   * usuarios createMany
   */
  export type usuariosCreateManyArgs = {
    /**
     * The data used to create many usuarios.
     * 
    **/
    data: Enumerable<usuariosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * usuarios update
   */
  export type usuariosUpdateArgs = {
    /**
     * Select specific fields to fetch from the usuarios
     * 
    **/
    select?: usuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuariosInclude | null
    /**
     * The data needed to update a usuarios.
     * 
    **/
    data: XOR<usuariosUpdateInput, usuariosUncheckedUpdateInput>
    /**
     * Choose, which usuarios to update.
     * 
    **/
    where: usuariosWhereUniqueInput
  }


  /**
   * usuarios updateMany
   */
  export type usuariosUpdateManyArgs = {
    /**
     * The data used to update usuarios.
     * 
    **/
    data: XOR<usuariosUpdateManyMutationInput, usuariosUncheckedUpdateManyInput>
    /**
     * Filter which usuarios to update
     * 
    **/
    where?: usuariosWhereInput
  }


  /**
   * usuarios upsert
   */
  export type usuariosUpsertArgs = {
    /**
     * Select specific fields to fetch from the usuarios
     * 
    **/
    select?: usuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuariosInclude | null
    /**
     * The filter to search for the usuarios to update in case it exists.
     * 
    **/
    where: usuariosWhereUniqueInput
    /**
     * In case the usuarios found by the `where` argument doesn't exist, create a new usuarios with this data.
     * 
    **/
    create: XOR<usuariosCreateInput, usuariosUncheckedCreateInput>
    /**
     * In case the usuarios was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<usuariosUpdateInput, usuariosUncheckedUpdateInput>
  }


  /**
   * usuarios delete
   */
  export type usuariosDeleteArgs = {
    /**
     * Select specific fields to fetch from the usuarios
     * 
    **/
    select?: usuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuariosInclude | null
    /**
     * Filter which usuarios to delete.
     * 
    **/
    where: usuariosWhereUniqueInput
  }


  /**
   * usuarios deleteMany
   */
  export type usuariosDeleteManyArgs = {
    /**
     * Filter which usuarios to delete
     * 
    **/
    where?: usuariosWhereInput
  }


  /**
   * usuarios: findUniqueOrThrow
   */
  export type usuariosFindUniqueOrThrowArgs = usuariosFindUniqueArgsBase
      

  /**
   * usuarios: findFirstOrThrow
   */
  export type usuariosFindFirstOrThrowArgs = usuariosFindFirstArgsBase
      

  /**
   * usuarios without action
   */
  export type usuariosArgs = {
    /**
     * Select specific fields to fetch from the usuarios
     * 
    **/
    select?: usuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuariosInclude | null
  }



  /**
   * Model enderecos
   */


  export type AggregateEnderecos = {
    _count: EnderecosCountAggregateOutputType | null
    _avg: EnderecosAvgAggregateOutputType | null
    _sum: EnderecosSumAggregateOutputType | null
    _min: EnderecosMinAggregateOutputType | null
    _max: EnderecosMaxAggregateOutputType | null
  }

  export type EnderecosAvgAggregateOutputType = {
    id: number | null
    numero: number | null
    usuarioId: number | null
  }

  export type EnderecosSumAggregateOutputType = {
    id: number | null
    numero: number | null
    usuarioId: number | null
  }

  export type EnderecosMinAggregateOutputType = {
    id: number | null
    logradouro: string | null
    cep: string | null
    numero: number | null
    bairro: string | null
    complemento: string | null
    cidades: string | null
    estado: string | null
    usuarioId: number | null
  }

  export type EnderecosMaxAggregateOutputType = {
    id: number | null
    logradouro: string | null
    cep: string | null
    numero: number | null
    bairro: string | null
    complemento: string | null
    cidades: string | null
    estado: string | null
    usuarioId: number | null
  }

  export type EnderecosCountAggregateOutputType = {
    id: number
    logradouro: number
    cep: number
    numero: number
    bairro: number
    complemento: number
    cidades: number
    estado: number
    usuarioId: number
    _all: number
  }


  export type EnderecosAvgAggregateInputType = {
    id?: true
    numero?: true
    usuarioId?: true
  }

  export type EnderecosSumAggregateInputType = {
    id?: true
    numero?: true
    usuarioId?: true
  }

  export type EnderecosMinAggregateInputType = {
    id?: true
    logradouro?: true
    cep?: true
    numero?: true
    bairro?: true
    complemento?: true
    cidades?: true
    estado?: true
    usuarioId?: true
  }

  export type EnderecosMaxAggregateInputType = {
    id?: true
    logradouro?: true
    cep?: true
    numero?: true
    bairro?: true
    complemento?: true
    cidades?: true
    estado?: true
    usuarioId?: true
  }

  export type EnderecosCountAggregateInputType = {
    id?: true
    logradouro?: true
    cep?: true
    numero?: true
    bairro?: true
    complemento?: true
    cidades?: true
    estado?: true
    usuarioId?: true
    _all?: true
  }

  export type EnderecosAggregateArgs = {
    /**
     * Filter which enderecos to aggregate.
     * 
    **/
    where?: enderecosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of enderecos to fetch.
     * 
    **/
    orderBy?: Enumerable<enderecosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: enderecosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` enderecos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` enderecos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned enderecos
    **/
    _count?: true | EnderecosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EnderecosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EnderecosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EnderecosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EnderecosMaxAggregateInputType
  }

  export type GetEnderecosAggregateType<T extends EnderecosAggregateArgs> = {
        [P in keyof T & keyof AggregateEnderecos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEnderecos[P]>
      : GetScalarType<T[P], AggregateEnderecos[P]>
  }




  export type EnderecosGroupByArgs = {
    where?: enderecosWhereInput
    orderBy?: Enumerable<enderecosOrderByWithAggregationInput>
    by: Array<EnderecosScalarFieldEnum>
    having?: enderecosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EnderecosCountAggregateInputType | true
    _avg?: EnderecosAvgAggregateInputType
    _sum?: EnderecosSumAggregateInputType
    _min?: EnderecosMinAggregateInputType
    _max?: EnderecosMaxAggregateInputType
  }


  export type EnderecosGroupByOutputType = {
    id: number
    logradouro: string
    cep: string | null
    numero: number
    bairro: string | null
    complemento: string | null
    cidades: string | null
    estado: string | null
    usuarioId: number
    _count: EnderecosCountAggregateOutputType | null
    _avg: EnderecosAvgAggregateOutputType | null
    _sum: EnderecosSumAggregateOutputType | null
    _min: EnderecosMinAggregateOutputType | null
    _max: EnderecosMaxAggregateOutputType | null
  }

  type GetEnderecosGroupByPayload<T extends EnderecosGroupByArgs> = PrismaPromise<
    Array<
      PickArray<EnderecosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EnderecosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EnderecosGroupByOutputType[P]>
            : GetScalarType<T[P], EnderecosGroupByOutputType[P]>
        }
      >
    >


  export type enderecosSelect = {
    id?: boolean
    logradouro?: boolean
    cep?: boolean
    numero?: boolean
    bairro?: boolean
    complemento?: boolean
    cidades?: boolean
    estado?: boolean
    usuario?: boolean | usuariosArgs
    usuarioId?: boolean
  }

  export type enderecosInclude = {
    usuario?: boolean | usuariosArgs
  }

  export type enderecosGetPayload<
    S extends boolean | null | undefined | enderecosArgs,
    U = keyof S
      > = S extends true
        ? enderecos
    : S extends undefined
    ? never
    : S extends enderecosArgs | enderecosFindManyArgs
    ?'include' extends U
    ? enderecos  & {
    [P in TrueKeys<S['include']>]:
        P extends 'usuario' ? usuariosGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'usuario' ? usuariosGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof enderecos ? enderecos[P] : never
  } 
    : enderecos
  : enderecos


  type enderecosCountArgs = Merge<
    Omit<enderecosFindManyArgs, 'select' | 'include'> & {
      select?: EnderecosCountAggregateInputType | true
    }
  >

  export interface enderecosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Enderecos that matches the filter.
     * @param {enderecosFindUniqueArgs} args - Arguments to find a Enderecos
     * @example
     * // Get one Enderecos
     * const enderecos = await prisma.enderecos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends enderecosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, enderecosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'enderecos'> extends True ? CheckSelect<T, Prisma__enderecosClient<enderecos>, Prisma__enderecosClient<enderecosGetPayload<T>>> : CheckSelect<T, Prisma__enderecosClient<enderecos | null, null>, Prisma__enderecosClient<enderecosGetPayload<T> | null, null>>

    /**
     * Find the first Enderecos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {enderecosFindFirstArgs} args - Arguments to find a Enderecos
     * @example
     * // Get one Enderecos
     * const enderecos = await prisma.enderecos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends enderecosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, enderecosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'enderecos'> extends True ? CheckSelect<T, Prisma__enderecosClient<enderecos>, Prisma__enderecosClient<enderecosGetPayload<T>>> : CheckSelect<T, Prisma__enderecosClient<enderecos | null, null>, Prisma__enderecosClient<enderecosGetPayload<T> | null, null>>

    /**
     * Find zero or more Enderecos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {enderecosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Enderecos
     * const enderecos = await prisma.enderecos.findMany()
     * 
     * // Get first 10 Enderecos
     * const enderecos = await prisma.enderecos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const enderecosWithIdOnly = await prisma.enderecos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends enderecosFindManyArgs>(
      args?: SelectSubset<T, enderecosFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<enderecos>>, PrismaPromise<Array<enderecosGetPayload<T>>>>

    /**
     * Create a Enderecos.
     * @param {enderecosCreateArgs} args - Arguments to create a Enderecos.
     * @example
     * // Create one Enderecos
     * const Enderecos = await prisma.enderecos.create({
     *   data: {
     *     // ... data to create a Enderecos
     *   }
     * })
     * 
    **/
    create<T extends enderecosCreateArgs>(
      args: SelectSubset<T, enderecosCreateArgs>
    ): CheckSelect<T, Prisma__enderecosClient<enderecos>, Prisma__enderecosClient<enderecosGetPayload<T>>>

    /**
     * Create many Enderecos.
     *     @param {enderecosCreateManyArgs} args - Arguments to create many Enderecos.
     *     @example
     *     // Create many Enderecos
     *     const enderecos = await prisma.enderecos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends enderecosCreateManyArgs>(
      args?: SelectSubset<T, enderecosCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Enderecos.
     * @param {enderecosDeleteArgs} args - Arguments to delete one Enderecos.
     * @example
     * // Delete one Enderecos
     * const Enderecos = await prisma.enderecos.delete({
     *   where: {
     *     // ... filter to delete one Enderecos
     *   }
     * })
     * 
    **/
    delete<T extends enderecosDeleteArgs>(
      args: SelectSubset<T, enderecosDeleteArgs>
    ): CheckSelect<T, Prisma__enderecosClient<enderecos>, Prisma__enderecosClient<enderecosGetPayload<T>>>

    /**
     * Update one Enderecos.
     * @param {enderecosUpdateArgs} args - Arguments to update one Enderecos.
     * @example
     * // Update one Enderecos
     * const enderecos = await prisma.enderecos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends enderecosUpdateArgs>(
      args: SelectSubset<T, enderecosUpdateArgs>
    ): CheckSelect<T, Prisma__enderecosClient<enderecos>, Prisma__enderecosClient<enderecosGetPayload<T>>>

    /**
     * Delete zero or more Enderecos.
     * @param {enderecosDeleteManyArgs} args - Arguments to filter Enderecos to delete.
     * @example
     * // Delete a few Enderecos
     * const { count } = await prisma.enderecos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends enderecosDeleteManyArgs>(
      args?: SelectSubset<T, enderecosDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Enderecos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {enderecosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Enderecos
     * const enderecos = await prisma.enderecos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends enderecosUpdateManyArgs>(
      args: SelectSubset<T, enderecosUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Enderecos.
     * @param {enderecosUpsertArgs} args - Arguments to update or create a Enderecos.
     * @example
     * // Update or create a Enderecos
     * const enderecos = await prisma.enderecos.upsert({
     *   create: {
     *     // ... data to create a Enderecos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Enderecos we want to update
     *   }
     * })
    **/
    upsert<T extends enderecosUpsertArgs>(
      args: SelectSubset<T, enderecosUpsertArgs>
    ): CheckSelect<T, Prisma__enderecosClient<enderecos>, Prisma__enderecosClient<enderecosGetPayload<T>>>

    /**
     * Find one Enderecos that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {enderecosFindUniqueOrThrowArgs} args - Arguments to find a Enderecos
     * @example
     * // Get one Enderecos
     * const enderecos = await prisma.enderecos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends enderecosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, enderecosFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__enderecosClient<enderecos>, Prisma__enderecosClient<enderecosGetPayload<T>>>

    /**
     * Find the first Enderecos that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {enderecosFindFirstOrThrowArgs} args - Arguments to find a Enderecos
     * @example
     * // Get one Enderecos
     * const enderecos = await prisma.enderecos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends enderecosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, enderecosFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__enderecosClient<enderecos>, Prisma__enderecosClient<enderecosGetPayload<T>>>

    /**
     * Count the number of Enderecos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {enderecosCountArgs} args - Arguments to filter Enderecos to count.
     * @example
     * // Count the number of Enderecos
     * const count = await prisma.enderecos.count({
     *   where: {
     *     // ... the filter for the Enderecos we want to count
     *   }
     * })
    **/
    count<T extends enderecosCountArgs>(
      args?: Subset<T, enderecosCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EnderecosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Enderecos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnderecosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EnderecosAggregateArgs>(args: Subset<T, EnderecosAggregateArgs>): PrismaPromise<GetEnderecosAggregateType<T>>

    /**
     * Group by Enderecos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnderecosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EnderecosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EnderecosGroupByArgs['orderBy'] }
        : { orderBy?: EnderecosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EnderecosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnderecosGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for enderecos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__enderecosClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    usuario<T extends usuariosArgs = {}>(args?: Subset<T, usuariosArgs>): CheckSelect<T, Prisma__usuariosClient<usuarios | Null>, Prisma__usuariosClient<usuariosGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * enderecos base type for findUnique actions
   */
  export type enderecosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the enderecos
     * 
    **/
    select?: enderecosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: enderecosInclude | null
    /**
     * Filter, which enderecos to fetch.
     * 
    **/
    where: enderecosWhereUniqueInput
  }

  /**
   * enderecos: findUnique
   */
  export interface enderecosFindUniqueArgs extends enderecosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * enderecos base type for findFirst actions
   */
  export type enderecosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the enderecos
     * 
    **/
    select?: enderecosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: enderecosInclude | null
    /**
     * Filter, which enderecos to fetch.
     * 
    **/
    where?: enderecosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of enderecos to fetch.
     * 
    **/
    orderBy?: Enumerable<enderecosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for enderecos.
     * 
    **/
    cursor?: enderecosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` enderecos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` enderecos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of enderecos.
     * 
    **/
    distinct?: Enumerable<EnderecosScalarFieldEnum>
  }

  /**
   * enderecos: findFirst
   */
  export interface enderecosFindFirstArgs extends enderecosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * enderecos findMany
   */
  export type enderecosFindManyArgs = {
    /**
     * Select specific fields to fetch from the enderecos
     * 
    **/
    select?: enderecosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: enderecosInclude | null
    /**
     * Filter, which enderecos to fetch.
     * 
    **/
    where?: enderecosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of enderecos to fetch.
     * 
    **/
    orderBy?: Enumerable<enderecosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing enderecos.
     * 
    **/
    cursor?: enderecosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` enderecos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` enderecos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<EnderecosScalarFieldEnum>
  }


  /**
   * enderecos create
   */
  export type enderecosCreateArgs = {
    /**
     * Select specific fields to fetch from the enderecos
     * 
    **/
    select?: enderecosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: enderecosInclude | null
    /**
     * The data needed to create a enderecos.
     * 
    **/
    data: XOR<enderecosCreateInput, enderecosUncheckedCreateInput>
  }


  /**
   * enderecos createMany
   */
  export type enderecosCreateManyArgs = {
    /**
     * The data used to create many enderecos.
     * 
    **/
    data: Enumerable<enderecosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * enderecos update
   */
  export type enderecosUpdateArgs = {
    /**
     * Select specific fields to fetch from the enderecos
     * 
    **/
    select?: enderecosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: enderecosInclude | null
    /**
     * The data needed to update a enderecos.
     * 
    **/
    data: XOR<enderecosUpdateInput, enderecosUncheckedUpdateInput>
    /**
     * Choose, which enderecos to update.
     * 
    **/
    where: enderecosWhereUniqueInput
  }


  /**
   * enderecos updateMany
   */
  export type enderecosUpdateManyArgs = {
    /**
     * The data used to update enderecos.
     * 
    **/
    data: XOR<enderecosUpdateManyMutationInput, enderecosUncheckedUpdateManyInput>
    /**
     * Filter which enderecos to update
     * 
    **/
    where?: enderecosWhereInput
  }


  /**
   * enderecos upsert
   */
  export type enderecosUpsertArgs = {
    /**
     * Select specific fields to fetch from the enderecos
     * 
    **/
    select?: enderecosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: enderecosInclude | null
    /**
     * The filter to search for the enderecos to update in case it exists.
     * 
    **/
    where: enderecosWhereUniqueInput
    /**
     * In case the enderecos found by the `where` argument doesn't exist, create a new enderecos with this data.
     * 
    **/
    create: XOR<enderecosCreateInput, enderecosUncheckedCreateInput>
    /**
     * In case the enderecos was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<enderecosUpdateInput, enderecosUncheckedUpdateInput>
  }


  /**
   * enderecos delete
   */
  export type enderecosDeleteArgs = {
    /**
     * Select specific fields to fetch from the enderecos
     * 
    **/
    select?: enderecosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: enderecosInclude | null
    /**
     * Filter which enderecos to delete.
     * 
    **/
    where: enderecosWhereUniqueInput
  }


  /**
   * enderecos deleteMany
   */
  export type enderecosDeleteManyArgs = {
    /**
     * Filter which enderecos to delete
     * 
    **/
    where?: enderecosWhereInput
  }


  /**
   * enderecos: findUniqueOrThrow
   */
  export type enderecosFindUniqueOrThrowArgs = enderecosFindUniqueArgsBase
      

  /**
   * enderecos: findFirstOrThrow
   */
  export type enderecosFindFirstOrThrowArgs = enderecosFindFirstArgsBase
      

  /**
   * enderecos without action
   */
  export type enderecosArgs = {
    /**
     * Select specific fields to fetch from the enderecos
     * 
    **/
    select?: enderecosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: enderecosInclude | null
  }



  /**
   * Model pedidos
   */


  export type AggregatePedidos = {
    _count: PedidosCountAggregateOutputType | null
    _avg: PedidosAvgAggregateOutputType | null
    _sum: PedidosSumAggregateOutputType | null
    _min: PedidosMinAggregateOutputType | null
    _max: PedidosMaxAggregateOutputType | null
  }

  export type PedidosAvgAggregateOutputType = {
    id: number | null
    quantidadeProdutos: number | null
    numerodoPedido: number | null
  }

  export type PedidosSumAggregateOutputType = {
    id: number | null
    quantidadeProdutos: number | null
    numerodoPedido: number | null
  }

  export type PedidosMinAggregateOutputType = {
    id: number | null
    quantidadeProdutos: number | null
    numerodoPedido: number | null
  }

  export type PedidosMaxAggregateOutputType = {
    id: number | null
    quantidadeProdutos: number | null
    numerodoPedido: number | null
  }

  export type PedidosCountAggregateOutputType = {
    id: number
    quantidadeProdutos: number
    numerodoPedido: number
    _all: number
  }


  export type PedidosAvgAggregateInputType = {
    id?: true
    quantidadeProdutos?: true
    numerodoPedido?: true
  }

  export type PedidosSumAggregateInputType = {
    id?: true
    quantidadeProdutos?: true
    numerodoPedido?: true
  }

  export type PedidosMinAggregateInputType = {
    id?: true
    quantidadeProdutos?: true
    numerodoPedido?: true
  }

  export type PedidosMaxAggregateInputType = {
    id?: true
    quantidadeProdutos?: true
    numerodoPedido?: true
  }

  export type PedidosCountAggregateInputType = {
    id?: true
    quantidadeProdutos?: true
    numerodoPedido?: true
    _all?: true
  }

  export type PedidosAggregateArgs = {
    /**
     * Filter which pedidos to aggregate.
     * 
    **/
    where?: pedidosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pedidos to fetch.
     * 
    **/
    orderBy?: Enumerable<pedidosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: pedidosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pedidos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pedidos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned pedidos
    **/
    _count?: true | PedidosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PedidosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PedidosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PedidosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PedidosMaxAggregateInputType
  }

  export type GetPedidosAggregateType<T extends PedidosAggregateArgs> = {
        [P in keyof T & keyof AggregatePedidos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePedidos[P]>
      : GetScalarType<T[P], AggregatePedidos[P]>
  }




  export type PedidosGroupByArgs = {
    where?: pedidosWhereInput
    orderBy?: Enumerable<pedidosOrderByWithAggregationInput>
    by: Array<PedidosScalarFieldEnum>
    having?: pedidosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PedidosCountAggregateInputType | true
    _avg?: PedidosAvgAggregateInputType
    _sum?: PedidosSumAggregateInputType
    _min?: PedidosMinAggregateInputType
    _max?: PedidosMaxAggregateInputType
  }


  export type PedidosGroupByOutputType = {
    id: number
    quantidadeProdutos: number
    numerodoPedido: number
    _count: PedidosCountAggregateOutputType | null
    _avg: PedidosAvgAggregateOutputType | null
    _sum: PedidosSumAggregateOutputType | null
    _min: PedidosMinAggregateOutputType | null
    _max: PedidosMaxAggregateOutputType | null
  }

  type GetPedidosGroupByPayload<T extends PedidosGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PedidosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PedidosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PedidosGroupByOutputType[P]>
            : GetScalarType<T[P], PedidosGroupByOutputType[P]>
        }
      >
    >


  export type pedidosSelect = {
    id?: boolean
    quantidadeProdutos?: boolean
    numerodoPedido?: boolean
    produtos?: boolean | PedidosProdutosFindManyArgs
    _count?: boolean | PedidosCountOutputTypeArgs
  }

  export type pedidosInclude = {
    produtos?: boolean | PedidosProdutosFindManyArgs
    _count?: boolean | PedidosCountOutputTypeArgs
  }

  export type pedidosGetPayload<
    S extends boolean | null | undefined | pedidosArgs,
    U = keyof S
      > = S extends true
        ? pedidos
    : S extends undefined
    ? never
    : S extends pedidosArgs | pedidosFindManyArgs
    ?'include' extends U
    ? pedidos  & {
    [P in TrueKeys<S['include']>]:
        P extends 'produtos' ? Array < PedidosProdutosGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? PedidosCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'produtos' ? Array < PedidosProdutosGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? PedidosCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof pedidos ? pedidos[P] : never
  } 
    : pedidos
  : pedidos


  type pedidosCountArgs = Merge<
    Omit<pedidosFindManyArgs, 'select' | 'include'> & {
      select?: PedidosCountAggregateInputType | true
    }
  >

  export interface pedidosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Pedidos that matches the filter.
     * @param {pedidosFindUniqueArgs} args - Arguments to find a Pedidos
     * @example
     * // Get one Pedidos
     * const pedidos = await prisma.pedidos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends pedidosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, pedidosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'pedidos'> extends True ? CheckSelect<T, Prisma__pedidosClient<pedidos>, Prisma__pedidosClient<pedidosGetPayload<T>>> : CheckSelect<T, Prisma__pedidosClient<pedidos | null, null>, Prisma__pedidosClient<pedidosGetPayload<T> | null, null>>

    /**
     * Find the first Pedidos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pedidosFindFirstArgs} args - Arguments to find a Pedidos
     * @example
     * // Get one Pedidos
     * const pedidos = await prisma.pedidos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends pedidosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, pedidosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'pedidos'> extends True ? CheckSelect<T, Prisma__pedidosClient<pedidos>, Prisma__pedidosClient<pedidosGetPayload<T>>> : CheckSelect<T, Prisma__pedidosClient<pedidos | null, null>, Prisma__pedidosClient<pedidosGetPayload<T> | null, null>>

    /**
     * Find zero or more Pedidos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pedidosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pedidos
     * const pedidos = await prisma.pedidos.findMany()
     * 
     * // Get first 10 Pedidos
     * const pedidos = await prisma.pedidos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pedidosWithIdOnly = await prisma.pedidos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends pedidosFindManyArgs>(
      args?: SelectSubset<T, pedidosFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<pedidos>>, PrismaPromise<Array<pedidosGetPayload<T>>>>

    /**
     * Create a Pedidos.
     * @param {pedidosCreateArgs} args - Arguments to create a Pedidos.
     * @example
     * // Create one Pedidos
     * const Pedidos = await prisma.pedidos.create({
     *   data: {
     *     // ... data to create a Pedidos
     *   }
     * })
     * 
    **/
    create<T extends pedidosCreateArgs>(
      args: SelectSubset<T, pedidosCreateArgs>
    ): CheckSelect<T, Prisma__pedidosClient<pedidos>, Prisma__pedidosClient<pedidosGetPayload<T>>>

    /**
     * Create many Pedidos.
     *     @param {pedidosCreateManyArgs} args - Arguments to create many Pedidos.
     *     @example
     *     // Create many Pedidos
     *     const pedidos = await prisma.pedidos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends pedidosCreateManyArgs>(
      args?: SelectSubset<T, pedidosCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Pedidos.
     * @param {pedidosDeleteArgs} args - Arguments to delete one Pedidos.
     * @example
     * // Delete one Pedidos
     * const Pedidos = await prisma.pedidos.delete({
     *   where: {
     *     // ... filter to delete one Pedidos
     *   }
     * })
     * 
    **/
    delete<T extends pedidosDeleteArgs>(
      args: SelectSubset<T, pedidosDeleteArgs>
    ): CheckSelect<T, Prisma__pedidosClient<pedidos>, Prisma__pedidosClient<pedidosGetPayload<T>>>

    /**
     * Update one Pedidos.
     * @param {pedidosUpdateArgs} args - Arguments to update one Pedidos.
     * @example
     * // Update one Pedidos
     * const pedidos = await prisma.pedidos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends pedidosUpdateArgs>(
      args: SelectSubset<T, pedidosUpdateArgs>
    ): CheckSelect<T, Prisma__pedidosClient<pedidos>, Prisma__pedidosClient<pedidosGetPayload<T>>>

    /**
     * Delete zero or more Pedidos.
     * @param {pedidosDeleteManyArgs} args - Arguments to filter Pedidos to delete.
     * @example
     * // Delete a few Pedidos
     * const { count } = await prisma.pedidos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends pedidosDeleteManyArgs>(
      args?: SelectSubset<T, pedidosDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pedidosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pedidos
     * const pedidos = await prisma.pedidos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends pedidosUpdateManyArgs>(
      args: SelectSubset<T, pedidosUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Pedidos.
     * @param {pedidosUpsertArgs} args - Arguments to update or create a Pedidos.
     * @example
     * // Update or create a Pedidos
     * const pedidos = await prisma.pedidos.upsert({
     *   create: {
     *     // ... data to create a Pedidos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pedidos we want to update
     *   }
     * })
    **/
    upsert<T extends pedidosUpsertArgs>(
      args: SelectSubset<T, pedidosUpsertArgs>
    ): CheckSelect<T, Prisma__pedidosClient<pedidos>, Prisma__pedidosClient<pedidosGetPayload<T>>>

    /**
     * Find one Pedidos that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {pedidosFindUniqueOrThrowArgs} args - Arguments to find a Pedidos
     * @example
     * // Get one Pedidos
     * const pedidos = await prisma.pedidos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends pedidosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, pedidosFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__pedidosClient<pedidos>, Prisma__pedidosClient<pedidosGetPayload<T>>>

    /**
     * Find the first Pedidos that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pedidosFindFirstOrThrowArgs} args - Arguments to find a Pedidos
     * @example
     * // Get one Pedidos
     * const pedidos = await prisma.pedidos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends pedidosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, pedidosFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__pedidosClient<pedidos>, Prisma__pedidosClient<pedidosGetPayload<T>>>

    /**
     * Count the number of Pedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pedidosCountArgs} args - Arguments to filter Pedidos to count.
     * @example
     * // Count the number of Pedidos
     * const count = await prisma.pedidos.count({
     *   where: {
     *     // ... the filter for the Pedidos we want to count
     *   }
     * })
    **/
    count<T extends pedidosCountArgs>(
      args?: Subset<T, pedidosCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PedidosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PedidosAggregateArgs>(args: Subset<T, PedidosAggregateArgs>): PrismaPromise<GetPedidosAggregateType<T>>

    /**
     * Group by Pedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PedidosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PedidosGroupByArgs['orderBy'] }
        : { orderBy?: PedidosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PedidosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPedidosGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for pedidos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__pedidosClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    produtos<T extends PedidosProdutosFindManyArgs = {}>(args?: Subset<T, PedidosProdutosFindManyArgs>): CheckSelect<T, PrismaPromise<Array<PedidosProdutos>| Null>, PrismaPromise<Array<PedidosProdutosGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * pedidos base type for findUnique actions
   */
  export type pedidosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the pedidos
     * 
    **/
    select?: pedidosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: pedidosInclude | null
    /**
     * Filter, which pedidos to fetch.
     * 
    **/
    where: pedidosWhereUniqueInput
  }

  /**
   * pedidos: findUnique
   */
  export interface pedidosFindUniqueArgs extends pedidosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * pedidos base type for findFirst actions
   */
  export type pedidosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the pedidos
     * 
    **/
    select?: pedidosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: pedidosInclude | null
    /**
     * Filter, which pedidos to fetch.
     * 
    **/
    where?: pedidosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pedidos to fetch.
     * 
    **/
    orderBy?: Enumerable<pedidosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pedidos.
     * 
    **/
    cursor?: pedidosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pedidos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pedidos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pedidos.
     * 
    **/
    distinct?: Enumerable<PedidosScalarFieldEnum>
  }

  /**
   * pedidos: findFirst
   */
  export interface pedidosFindFirstArgs extends pedidosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * pedidos findMany
   */
  export type pedidosFindManyArgs = {
    /**
     * Select specific fields to fetch from the pedidos
     * 
    **/
    select?: pedidosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: pedidosInclude | null
    /**
     * Filter, which pedidos to fetch.
     * 
    **/
    where?: pedidosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pedidos to fetch.
     * 
    **/
    orderBy?: Enumerable<pedidosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing pedidos.
     * 
    **/
    cursor?: pedidosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pedidos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pedidos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PedidosScalarFieldEnum>
  }


  /**
   * pedidos create
   */
  export type pedidosCreateArgs = {
    /**
     * Select specific fields to fetch from the pedidos
     * 
    **/
    select?: pedidosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: pedidosInclude | null
    /**
     * The data needed to create a pedidos.
     * 
    **/
    data: XOR<pedidosCreateInput, pedidosUncheckedCreateInput>
  }


  /**
   * pedidos createMany
   */
  export type pedidosCreateManyArgs = {
    /**
     * The data used to create many pedidos.
     * 
    **/
    data: Enumerable<pedidosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * pedidos update
   */
  export type pedidosUpdateArgs = {
    /**
     * Select specific fields to fetch from the pedidos
     * 
    **/
    select?: pedidosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: pedidosInclude | null
    /**
     * The data needed to update a pedidos.
     * 
    **/
    data: XOR<pedidosUpdateInput, pedidosUncheckedUpdateInput>
    /**
     * Choose, which pedidos to update.
     * 
    **/
    where: pedidosWhereUniqueInput
  }


  /**
   * pedidos updateMany
   */
  export type pedidosUpdateManyArgs = {
    /**
     * The data used to update pedidos.
     * 
    **/
    data: XOR<pedidosUpdateManyMutationInput, pedidosUncheckedUpdateManyInput>
    /**
     * Filter which pedidos to update
     * 
    **/
    where?: pedidosWhereInput
  }


  /**
   * pedidos upsert
   */
  export type pedidosUpsertArgs = {
    /**
     * Select specific fields to fetch from the pedidos
     * 
    **/
    select?: pedidosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: pedidosInclude | null
    /**
     * The filter to search for the pedidos to update in case it exists.
     * 
    **/
    where: pedidosWhereUniqueInput
    /**
     * In case the pedidos found by the `where` argument doesn't exist, create a new pedidos with this data.
     * 
    **/
    create: XOR<pedidosCreateInput, pedidosUncheckedCreateInput>
    /**
     * In case the pedidos was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<pedidosUpdateInput, pedidosUncheckedUpdateInput>
  }


  /**
   * pedidos delete
   */
  export type pedidosDeleteArgs = {
    /**
     * Select specific fields to fetch from the pedidos
     * 
    **/
    select?: pedidosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: pedidosInclude | null
    /**
     * Filter which pedidos to delete.
     * 
    **/
    where: pedidosWhereUniqueInput
  }


  /**
   * pedidos deleteMany
   */
  export type pedidosDeleteManyArgs = {
    /**
     * Filter which pedidos to delete
     * 
    **/
    where?: pedidosWhereInput
  }


  /**
   * pedidos: findUniqueOrThrow
   */
  export type pedidosFindUniqueOrThrowArgs = pedidosFindUniqueArgsBase
      

  /**
   * pedidos: findFirstOrThrow
   */
  export type pedidosFindFirstOrThrowArgs = pedidosFindFirstArgsBase
      

  /**
   * pedidos without action
   */
  export type pedidosArgs = {
    /**
     * Select specific fields to fetch from the pedidos
     * 
    **/
    select?: pedidosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: pedidosInclude | null
  }



  /**
   * Model produtos
   */


  export type AggregateProdutos = {
    _count: ProdutosCountAggregateOutputType | null
    _avg: ProdutosAvgAggregateOutputType | null
    _sum: ProdutosSumAggregateOutputType | null
    _min: ProdutosMinAggregateOutputType | null
    _max: ProdutosMaxAggregateOutputType | null
  }

  export type ProdutosAvgAggregateOutputType = {
    id: number | null
    preco: number | null
  }

  export type ProdutosSumAggregateOutputType = {
    id: number | null
    preco: number | null
  }

  export type ProdutosMinAggregateOutputType = {
    id: number | null
    nome: string | null
    descricao: string | null
    tipo: string | null
    validade: Date | null
    garantia: string | null
    preco: number | null
  }

  export type ProdutosMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    descricao: string | null
    tipo: string | null
    validade: Date | null
    garantia: string | null
    preco: number | null
  }

  export type ProdutosCountAggregateOutputType = {
    id: number
    nome: number
    descricao: number
    tipo: number
    validade: number
    garantia: number
    preco: number
    _all: number
  }


  export type ProdutosAvgAggregateInputType = {
    id?: true
    preco?: true
  }

  export type ProdutosSumAggregateInputType = {
    id?: true
    preco?: true
  }

  export type ProdutosMinAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    tipo?: true
    validade?: true
    garantia?: true
    preco?: true
  }

  export type ProdutosMaxAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    tipo?: true
    validade?: true
    garantia?: true
    preco?: true
  }

  export type ProdutosCountAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    tipo?: true
    validade?: true
    garantia?: true
    preco?: true
    _all?: true
  }

  export type ProdutosAggregateArgs = {
    /**
     * Filter which produtos to aggregate.
     * 
    **/
    where?: produtosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of produtos to fetch.
     * 
    **/
    orderBy?: Enumerable<produtosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: produtosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` produtos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` produtos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned produtos
    **/
    _count?: true | ProdutosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdutosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdutosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdutosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdutosMaxAggregateInputType
  }

  export type GetProdutosAggregateType<T extends ProdutosAggregateArgs> = {
        [P in keyof T & keyof AggregateProdutos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProdutos[P]>
      : GetScalarType<T[P], AggregateProdutos[P]>
  }




  export type ProdutosGroupByArgs = {
    where?: produtosWhereInput
    orderBy?: Enumerable<produtosOrderByWithAggregationInput>
    by: Array<ProdutosScalarFieldEnum>
    having?: produtosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdutosCountAggregateInputType | true
    _avg?: ProdutosAvgAggregateInputType
    _sum?: ProdutosSumAggregateInputType
    _min?: ProdutosMinAggregateInputType
    _max?: ProdutosMaxAggregateInputType
  }


  export type ProdutosGroupByOutputType = {
    id: number
    nome: string
    descricao: string | null
    tipo: string | null
    validade: Date | null
    garantia: string | null
    preco: number | null
    _count: ProdutosCountAggregateOutputType | null
    _avg: ProdutosAvgAggregateOutputType | null
    _sum: ProdutosSumAggregateOutputType | null
    _min: ProdutosMinAggregateOutputType | null
    _max: ProdutosMaxAggregateOutputType | null
  }

  type GetProdutosGroupByPayload<T extends ProdutosGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProdutosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdutosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdutosGroupByOutputType[P]>
            : GetScalarType<T[P], ProdutosGroupByOutputType[P]>
        }
      >
    >


  export type produtosSelect = {
    id?: boolean
    nome?: boolean
    descricao?: boolean
    tipo?: boolean
    validade?: boolean
    garantia?: boolean
    preco?: boolean
    pedidos?: boolean | PedidosProdutosFindManyArgs
    _count?: boolean | ProdutosCountOutputTypeArgs
  }

  export type produtosInclude = {
    pedidos?: boolean | PedidosProdutosFindManyArgs
    _count?: boolean | ProdutosCountOutputTypeArgs
  }

  export type produtosGetPayload<
    S extends boolean | null | undefined | produtosArgs,
    U = keyof S
      > = S extends true
        ? produtos
    : S extends undefined
    ? never
    : S extends produtosArgs | produtosFindManyArgs
    ?'include' extends U
    ? produtos  & {
    [P in TrueKeys<S['include']>]:
        P extends 'pedidos' ? Array < PedidosProdutosGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? ProdutosCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'pedidos' ? Array < PedidosProdutosGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? ProdutosCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof produtos ? produtos[P] : never
  } 
    : produtos
  : produtos


  type produtosCountArgs = Merge<
    Omit<produtosFindManyArgs, 'select' | 'include'> & {
      select?: ProdutosCountAggregateInputType | true
    }
  >

  export interface produtosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Produtos that matches the filter.
     * @param {produtosFindUniqueArgs} args - Arguments to find a Produtos
     * @example
     * // Get one Produtos
     * const produtos = await prisma.produtos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends produtosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, produtosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'produtos'> extends True ? CheckSelect<T, Prisma__produtosClient<produtos>, Prisma__produtosClient<produtosGetPayload<T>>> : CheckSelect<T, Prisma__produtosClient<produtos | null, null>, Prisma__produtosClient<produtosGetPayload<T> | null, null>>

    /**
     * Find the first Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produtosFindFirstArgs} args - Arguments to find a Produtos
     * @example
     * // Get one Produtos
     * const produtos = await prisma.produtos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends produtosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, produtosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'produtos'> extends True ? CheckSelect<T, Prisma__produtosClient<produtos>, Prisma__produtosClient<produtosGetPayload<T>>> : CheckSelect<T, Prisma__produtosClient<produtos | null, null>, Prisma__produtosClient<produtosGetPayload<T> | null, null>>

    /**
     * Find zero or more Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produtosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produtos
     * const produtos = await prisma.produtos.findMany()
     * 
     * // Get first 10 Produtos
     * const produtos = await prisma.produtos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produtosWithIdOnly = await prisma.produtos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends produtosFindManyArgs>(
      args?: SelectSubset<T, produtosFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<produtos>>, PrismaPromise<Array<produtosGetPayload<T>>>>

    /**
     * Create a Produtos.
     * @param {produtosCreateArgs} args - Arguments to create a Produtos.
     * @example
     * // Create one Produtos
     * const Produtos = await prisma.produtos.create({
     *   data: {
     *     // ... data to create a Produtos
     *   }
     * })
     * 
    **/
    create<T extends produtosCreateArgs>(
      args: SelectSubset<T, produtosCreateArgs>
    ): CheckSelect<T, Prisma__produtosClient<produtos>, Prisma__produtosClient<produtosGetPayload<T>>>

    /**
     * Create many Produtos.
     *     @param {produtosCreateManyArgs} args - Arguments to create many Produtos.
     *     @example
     *     // Create many Produtos
     *     const produtos = await prisma.produtos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends produtosCreateManyArgs>(
      args?: SelectSubset<T, produtosCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Produtos.
     * @param {produtosDeleteArgs} args - Arguments to delete one Produtos.
     * @example
     * // Delete one Produtos
     * const Produtos = await prisma.produtos.delete({
     *   where: {
     *     // ... filter to delete one Produtos
     *   }
     * })
     * 
    **/
    delete<T extends produtosDeleteArgs>(
      args: SelectSubset<T, produtosDeleteArgs>
    ): CheckSelect<T, Prisma__produtosClient<produtos>, Prisma__produtosClient<produtosGetPayload<T>>>

    /**
     * Update one Produtos.
     * @param {produtosUpdateArgs} args - Arguments to update one Produtos.
     * @example
     * // Update one Produtos
     * const produtos = await prisma.produtos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends produtosUpdateArgs>(
      args: SelectSubset<T, produtosUpdateArgs>
    ): CheckSelect<T, Prisma__produtosClient<produtos>, Prisma__produtosClient<produtosGetPayload<T>>>

    /**
     * Delete zero or more Produtos.
     * @param {produtosDeleteManyArgs} args - Arguments to filter Produtos to delete.
     * @example
     * // Delete a few Produtos
     * const { count } = await prisma.produtos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends produtosDeleteManyArgs>(
      args?: SelectSubset<T, produtosDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produtosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produtos
     * const produtos = await prisma.produtos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends produtosUpdateManyArgs>(
      args: SelectSubset<T, produtosUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Produtos.
     * @param {produtosUpsertArgs} args - Arguments to update or create a Produtos.
     * @example
     * // Update or create a Produtos
     * const produtos = await prisma.produtos.upsert({
     *   create: {
     *     // ... data to create a Produtos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produtos we want to update
     *   }
     * })
    **/
    upsert<T extends produtosUpsertArgs>(
      args: SelectSubset<T, produtosUpsertArgs>
    ): CheckSelect<T, Prisma__produtosClient<produtos>, Prisma__produtosClient<produtosGetPayload<T>>>

    /**
     * Find one Produtos that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {produtosFindUniqueOrThrowArgs} args - Arguments to find a Produtos
     * @example
     * // Get one Produtos
     * const produtos = await prisma.produtos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends produtosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, produtosFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__produtosClient<produtos>, Prisma__produtosClient<produtosGetPayload<T>>>

    /**
     * Find the first Produtos that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produtosFindFirstOrThrowArgs} args - Arguments to find a Produtos
     * @example
     * // Get one Produtos
     * const produtos = await prisma.produtos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends produtosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, produtosFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__produtosClient<produtos>, Prisma__produtosClient<produtosGetPayload<T>>>

    /**
     * Count the number of Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produtosCountArgs} args - Arguments to filter Produtos to count.
     * @example
     * // Count the number of Produtos
     * const count = await prisma.produtos.count({
     *   where: {
     *     // ... the filter for the Produtos we want to count
     *   }
     * })
    **/
    count<T extends produtosCountArgs>(
      args?: Subset<T, produtosCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutosAggregateArgs>(args: Subset<T, ProdutosAggregateArgs>): PrismaPromise<GetProdutosAggregateType<T>>

    /**
     * Group by Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdutosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdutosGroupByArgs['orderBy'] }
        : { orderBy?: ProdutosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdutosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutosGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for produtos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__produtosClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    pedidos<T extends PedidosProdutosFindManyArgs = {}>(args?: Subset<T, PedidosProdutosFindManyArgs>): CheckSelect<T, PrismaPromise<Array<PedidosProdutos>| Null>, PrismaPromise<Array<PedidosProdutosGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * produtos base type for findUnique actions
   */
  export type produtosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the produtos
     * 
    **/
    select?: produtosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: produtosInclude | null
    /**
     * Filter, which produtos to fetch.
     * 
    **/
    where: produtosWhereUniqueInput
  }

  /**
   * produtos: findUnique
   */
  export interface produtosFindUniqueArgs extends produtosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * produtos base type for findFirst actions
   */
  export type produtosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the produtos
     * 
    **/
    select?: produtosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: produtosInclude | null
    /**
     * Filter, which produtos to fetch.
     * 
    **/
    where?: produtosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of produtos to fetch.
     * 
    **/
    orderBy?: Enumerable<produtosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for produtos.
     * 
    **/
    cursor?: produtosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` produtos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` produtos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of produtos.
     * 
    **/
    distinct?: Enumerable<ProdutosScalarFieldEnum>
  }

  /**
   * produtos: findFirst
   */
  export interface produtosFindFirstArgs extends produtosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * produtos findMany
   */
  export type produtosFindManyArgs = {
    /**
     * Select specific fields to fetch from the produtos
     * 
    **/
    select?: produtosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: produtosInclude | null
    /**
     * Filter, which produtos to fetch.
     * 
    **/
    where?: produtosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of produtos to fetch.
     * 
    **/
    orderBy?: Enumerable<produtosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing produtos.
     * 
    **/
    cursor?: produtosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` produtos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` produtos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProdutosScalarFieldEnum>
  }


  /**
   * produtos create
   */
  export type produtosCreateArgs = {
    /**
     * Select specific fields to fetch from the produtos
     * 
    **/
    select?: produtosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: produtosInclude | null
    /**
     * The data needed to create a produtos.
     * 
    **/
    data: XOR<produtosCreateInput, produtosUncheckedCreateInput>
  }


  /**
   * produtos createMany
   */
  export type produtosCreateManyArgs = {
    /**
     * The data used to create many produtos.
     * 
    **/
    data: Enumerable<produtosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * produtos update
   */
  export type produtosUpdateArgs = {
    /**
     * Select specific fields to fetch from the produtos
     * 
    **/
    select?: produtosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: produtosInclude | null
    /**
     * The data needed to update a produtos.
     * 
    **/
    data: XOR<produtosUpdateInput, produtosUncheckedUpdateInput>
    /**
     * Choose, which produtos to update.
     * 
    **/
    where: produtosWhereUniqueInput
  }


  /**
   * produtos updateMany
   */
  export type produtosUpdateManyArgs = {
    /**
     * The data used to update produtos.
     * 
    **/
    data: XOR<produtosUpdateManyMutationInput, produtosUncheckedUpdateManyInput>
    /**
     * Filter which produtos to update
     * 
    **/
    where?: produtosWhereInput
  }


  /**
   * produtos upsert
   */
  export type produtosUpsertArgs = {
    /**
     * Select specific fields to fetch from the produtos
     * 
    **/
    select?: produtosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: produtosInclude | null
    /**
     * The filter to search for the produtos to update in case it exists.
     * 
    **/
    where: produtosWhereUniqueInput
    /**
     * In case the produtos found by the `where` argument doesn't exist, create a new produtos with this data.
     * 
    **/
    create: XOR<produtosCreateInput, produtosUncheckedCreateInput>
    /**
     * In case the produtos was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<produtosUpdateInput, produtosUncheckedUpdateInput>
  }


  /**
   * produtos delete
   */
  export type produtosDeleteArgs = {
    /**
     * Select specific fields to fetch from the produtos
     * 
    **/
    select?: produtosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: produtosInclude | null
    /**
     * Filter which produtos to delete.
     * 
    **/
    where: produtosWhereUniqueInput
  }


  /**
   * produtos deleteMany
   */
  export type produtosDeleteManyArgs = {
    /**
     * Filter which produtos to delete
     * 
    **/
    where?: produtosWhereInput
  }


  /**
   * produtos: findUniqueOrThrow
   */
  export type produtosFindUniqueOrThrowArgs = produtosFindUniqueArgsBase
      

  /**
   * produtos: findFirstOrThrow
   */
  export type produtosFindFirstOrThrowArgs = produtosFindFirstArgsBase
      

  /**
   * produtos without action
   */
  export type produtosArgs = {
    /**
     * Select specific fields to fetch from the produtos
     * 
    **/
    select?: produtosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: produtosInclude | null
  }



  /**
   * Model PedidosProdutos
   */


  export type AggregatePedidosProdutos = {
    _count: PedidosProdutosCountAggregateOutputType | null
    _avg: PedidosProdutosAvgAggregateOutputType | null
    _sum: PedidosProdutosSumAggregateOutputType | null
    _min: PedidosProdutosMinAggregateOutputType | null
    _max: PedidosProdutosMaxAggregateOutputType | null
  }

  export type PedidosProdutosAvgAggregateOutputType = {
    id: number | null
    idProduto: number | null
    idPedido: number | null
  }

  export type PedidosProdutosSumAggregateOutputType = {
    id: number | null
    idProduto: number | null
    idPedido: number | null
  }

  export type PedidosProdutosMinAggregateOutputType = {
    id: number | null
    idProduto: number | null
    idPedido: number | null
  }

  export type PedidosProdutosMaxAggregateOutputType = {
    id: number | null
    idProduto: number | null
    idPedido: number | null
  }

  export type PedidosProdutosCountAggregateOutputType = {
    id: number
    idProduto: number
    idPedido: number
    _all: number
  }


  export type PedidosProdutosAvgAggregateInputType = {
    id?: true
    idProduto?: true
    idPedido?: true
  }

  export type PedidosProdutosSumAggregateInputType = {
    id?: true
    idProduto?: true
    idPedido?: true
  }

  export type PedidosProdutosMinAggregateInputType = {
    id?: true
    idProduto?: true
    idPedido?: true
  }

  export type PedidosProdutosMaxAggregateInputType = {
    id?: true
    idProduto?: true
    idPedido?: true
  }

  export type PedidosProdutosCountAggregateInputType = {
    id?: true
    idProduto?: true
    idPedido?: true
    _all?: true
  }

  export type PedidosProdutosAggregateArgs = {
    /**
     * Filter which PedidosProdutos to aggregate.
     * 
    **/
    where?: PedidosProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PedidosProdutos to fetch.
     * 
    **/
    orderBy?: Enumerable<PedidosProdutosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PedidosProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PedidosProdutos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PedidosProdutos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PedidosProdutos
    **/
    _count?: true | PedidosProdutosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PedidosProdutosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PedidosProdutosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PedidosProdutosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PedidosProdutosMaxAggregateInputType
  }

  export type GetPedidosProdutosAggregateType<T extends PedidosProdutosAggregateArgs> = {
        [P in keyof T & keyof AggregatePedidosProdutos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePedidosProdutos[P]>
      : GetScalarType<T[P], AggregatePedidosProdutos[P]>
  }




  export type PedidosProdutosGroupByArgs = {
    where?: PedidosProdutosWhereInput
    orderBy?: Enumerable<PedidosProdutosOrderByWithAggregationInput>
    by: Array<PedidosProdutosScalarFieldEnum>
    having?: PedidosProdutosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PedidosProdutosCountAggregateInputType | true
    _avg?: PedidosProdutosAvgAggregateInputType
    _sum?: PedidosProdutosSumAggregateInputType
    _min?: PedidosProdutosMinAggregateInputType
    _max?: PedidosProdutosMaxAggregateInputType
  }


  export type PedidosProdutosGroupByOutputType = {
    id: number
    idProduto: number
    idPedido: number
    _count: PedidosProdutosCountAggregateOutputType | null
    _avg: PedidosProdutosAvgAggregateOutputType | null
    _sum: PedidosProdutosSumAggregateOutputType | null
    _min: PedidosProdutosMinAggregateOutputType | null
    _max: PedidosProdutosMaxAggregateOutputType | null
  }

  type GetPedidosProdutosGroupByPayload<T extends PedidosProdutosGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PedidosProdutosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PedidosProdutosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PedidosProdutosGroupByOutputType[P]>
            : GetScalarType<T[P], PedidosProdutosGroupByOutputType[P]>
        }
      >
    >


  export type PedidosProdutosSelect = {
    id?: boolean
    idProduto?: boolean
    idPedido?: boolean
    produto?: boolean | produtosArgs
    pedido?: boolean | pedidosArgs
  }

  export type PedidosProdutosInclude = {
    produto?: boolean | produtosArgs
    pedido?: boolean | pedidosArgs
  }

  export type PedidosProdutosGetPayload<
    S extends boolean | null | undefined | PedidosProdutosArgs,
    U = keyof S
      > = S extends true
        ? PedidosProdutos
    : S extends undefined
    ? never
    : S extends PedidosProdutosArgs | PedidosProdutosFindManyArgs
    ?'include' extends U
    ? PedidosProdutos  & {
    [P in TrueKeys<S['include']>]:
        P extends 'produto' ? produtosGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'pedido' ? pedidosGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'produto' ? produtosGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'pedido' ? pedidosGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof PedidosProdutos ? PedidosProdutos[P] : never
  } 
    : PedidosProdutos
  : PedidosProdutos


  type PedidosProdutosCountArgs = Merge<
    Omit<PedidosProdutosFindManyArgs, 'select' | 'include'> & {
      select?: PedidosProdutosCountAggregateInputType | true
    }
  >

  export interface PedidosProdutosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one PedidosProdutos that matches the filter.
     * @param {PedidosProdutosFindUniqueArgs} args - Arguments to find a PedidosProdutos
     * @example
     * // Get one PedidosProdutos
     * const pedidosProdutos = await prisma.pedidosProdutos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PedidosProdutosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PedidosProdutosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PedidosProdutos'> extends True ? CheckSelect<T, Prisma__PedidosProdutosClient<PedidosProdutos>, Prisma__PedidosProdutosClient<PedidosProdutosGetPayload<T>>> : CheckSelect<T, Prisma__PedidosProdutosClient<PedidosProdutos | null, null>, Prisma__PedidosProdutosClient<PedidosProdutosGetPayload<T> | null, null>>

    /**
     * Find the first PedidosProdutos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidosProdutosFindFirstArgs} args - Arguments to find a PedidosProdutos
     * @example
     * // Get one PedidosProdutos
     * const pedidosProdutos = await prisma.pedidosProdutos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PedidosProdutosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PedidosProdutosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PedidosProdutos'> extends True ? CheckSelect<T, Prisma__PedidosProdutosClient<PedidosProdutos>, Prisma__PedidosProdutosClient<PedidosProdutosGetPayload<T>>> : CheckSelect<T, Prisma__PedidosProdutosClient<PedidosProdutos | null, null>, Prisma__PedidosProdutosClient<PedidosProdutosGetPayload<T> | null, null>>

    /**
     * Find zero or more PedidosProdutos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidosProdutosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PedidosProdutos
     * const pedidosProdutos = await prisma.pedidosProdutos.findMany()
     * 
     * // Get first 10 PedidosProdutos
     * const pedidosProdutos = await prisma.pedidosProdutos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pedidosProdutosWithIdOnly = await prisma.pedidosProdutos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PedidosProdutosFindManyArgs>(
      args?: SelectSubset<T, PedidosProdutosFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<PedidosProdutos>>, PrismaPromise<Array<PedidosProdutosGetPayload<T>>>>

    /**
     * Create a PedidosProdutos.
     * @param {PedidosProdutosCreateArgs} args - Arguments to create a PedidosProdutos.
     * @example
     * // Create one PedidosProdutos
     * const PedidosProdutos = await prisma.pedidosProdutos.create({
     *   data: {
     *     // ... data to create a PedidosProdutos
     *   }
     * })
     * 
    **/
    create<T extends PedidosProdutosCreateArgs>(
      args: SelectSubset<T, PedidosProdutosCreateArgs>
    ): CheckSelect<T, Prisma__PedidosProdutosClient<PedidosProdutos>, Prisma__PedidosProdutosClient<PedidosProdutosGetPayload<T>>>

    /**
     * Create many PedidosProdutos.
     *     @param {PedidosProdutosCreateManyArgs} args - Arguments to create many PedidosProdutos.
     *     @example
     *     // Create many PedidosProdutos
     *     const pedidosProdutos = await prisma.pedidosProdutos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PedidosProdutosCreateManyArgs>(
      args?: SelectSubset<T, PedidosProdutosCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a PedidosProdutos.
     * @param {PedidosProdutosDeleteArgs} args - Arguments to delete one PedidosProdutos.
     * @example
     * // Delete one PedidosProdutos
     * const PedidosProdutos = await prisma.pedidosProdutos.delete({
     *   where: {
     *     // ... filter to delete one PedidosProdutos
     *   }
     * })
     * 
    **/
    delete<T extends PedidosProdutosDeleteArgs>(
      args: SelectSubset<T, PedidosProdutosDeleteArgs>
    ): CheckSelect<T, Prisma__PedidosProdutosClient<PedidosProdutos>, Prisma__PedidosProdutosClient<PedidosProdutosGetPayload<T>>>

    /**
     * Update one PedidosProdutos.
     * @param {PedidosProdutosUpdateArgs} args - Arguments to update one PedidosProdutos.
     * @example
     * // Update one PedidosProdutos
     * const pedidosProdutos = await prisma.pedidosProdutos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PedidosProdutosUpdateArgs>(
      args: SelectSubset<T, PedidosProdutosUpdateArgs>
    ): CheckSelect<T, Prisma__PedidosProdutosClient<PedidosProdutos>, Prisma__PedidosProdutosClient<PedidosProdutosGetPayload<T>>>

    /**
     * Delete zero or more PedidosProdutos.
     * @param {PedidosProdutosDeleteManyArgs} args - Arguments to filter PedidosProdutos to delete.
     * @example
     * // Delete a few PedidosProdutos
     * const { count } = await prisma.pedidosProdutos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PedidosProdutosDeleteManyArgs>(
      args?: SelectSubset<T, PedidosProdutosDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more PedidosProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidosProdutosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PedidosProdutos
     * const pedidosProdutos = await prisma.pedidosProdutos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PedidosProdutosUpdateManyArgs>(
      args: SelectSubset<T, PedidosProdutosUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one PedidosProdutos.
     * @param {PedidosProdutosUpsertArgs} args - Arguments to update or create a PedidosProdutos.
     * @example
     * // Update or create a PedidosProdutos
     * const pedidosProdutos = await prisma.pedidosProdutos.upsert({
     *   create: {
     *     // ... data to create a PedidosProdutos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PedidosProdutos we want to update
     *   }
     * })
    **/
    upsert<T extends PedidosProdutosUpsertArgs>(
      args: SelectSubset<T, PedidosProdutosUpsertArgs>
    ): CheckSelect<T, Prisma__PedidosProdutosClient<PedidosProdutos>, Prisma__PedidosProdutosClient<PedidosProdutosGetPayload<T>>>

    /**
     * Find one PedidosProdutos that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {PedidosProdutosFindUniqueOrThrowArgs} args - Arguments to find a PedidosProdutos
     * @example
     * // Get one PedidosProdutos
     * const pedidosProdutos = await prisma.pedidosProdutos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PedidosProdutosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PedidosProdutosFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__PedidosProdutosClient<PedidosProdutos>, Prisma__PedidosProdutosClient<PedidosProdutosGetPayload<T>>>

    /**
     * Find the first PedidosProdutos that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidosProdutosFindFirstOrThrowArgs} args - Arguments to find a PedidosProdutos
     * @example
     * // Get one PedidosProdutos
     * const pedidosProdutos = await prisma.pedidosProdutos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PedidosProdutosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PedidosProdutosFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__PedidosProdutosClient<PedidosProdutos>, Prisma__PedidosProdutosClient<PedidosProdutosGetPayload<T>>>

    /**
     * Count the number of PedidosProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidosProdutosCountArgs} args - Arguments to filter PedidosProdutos to count.
     * @example
     * // Count the number of PedidosProdutos
     * const count = await prisma.pedidosProdutos.count({
     *   where: {
     *     // ... the filter for the PedidosProdutos we want to count
     *   }
     * })
    **/
    count<T extends PedidosProdutosCountArgs>(
      args?: Subset<T, PedidosProdutosCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PedidosProdutosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PedidosProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidosProdutosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PedidosProdutosAggregateArgs>(args: Subset<T, PedidosProdutosAggregateArgs>): PrismaPromise<GetPedidosProdutosAggregateType<T>>

    /**
     * Group by PedidosProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidosProdutosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PedidosProdutosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PedidosProdutosGroupByArgs['orderBy'] }
        : { orderBy?: PedidosProdutosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PedidosProdutosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPedidosProdutosGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for PedidosProdutos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PedidosProdutosClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    produto<T extends produtosArgs = {}>(args?: Subset<T, produtosArgs>): CheckSelect<T, Prisma__produtosClient<produtos | Null>, Prisma__produtosClient<produtosGetPayload<T> | Null>>;

    pedido<T extends pedidosArgs = {}>(args?: Subset<T, pedidosArgs>): CheckSelect<T, Prisma__pedidosClient<pedidos | Null>, Prisma__pedidosClient<pedidosGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * PedidosProdutos base type for findUnique actions
   */
  export type PedidosProdutosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the PedidosProdutos
     * 
    **/
    select?: PedidosProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidosProdutosInclude | null
    /**
     * Filter, which PedidosProdutos to fetch.
     * 
    **/
    where: PedidosProdutosWhereUniqueInput
  }

  /**
   * PedidosProdutos: findUnique
   */
  export interface PedidosProdutosFindUniqueArgs extends PedidosProdutosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PedidosProdutos base type for findFirst actions
   */
  export type PedidosProdutosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the PedidosProdutos
     * 
    **/
    select?: PedidosProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidosProdutosInclude | null
    /**
     * Filter, which PedidosProdutos to fetch.
     * 
    **/
    where?: PedidosProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PedidosProdutos to fetch.
     * 
    **/
    orderBy?: Enumerable<PedidosProdutosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PedidosProdutos.
     * 
    **/
    cursor?: PedidosProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PedidosProdutos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PedidosProdutos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PedidosProdutos.
     * 
    **/
    distinct?: Enumerable<PedidosProdutosScalarFieldEnum>
  }

  /**
   * PedidosProdutos: findFirst
   */
  export interface PedidosProdutosFindFirstArgs extends PedidosProdutosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PedidosProdutos findMany
   */
  export type PedidosProdutosFindManyArgs = {
    /**
     * Select specific fields to fetch from the PedidosProdutos
     * 
    **/
    select?: PedidosProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidosProdutosInclude | null
    /**
     * Filter, which PedidosProdutos to fetch.
     * 
    **/
    where?: PedidosProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PedidosProdutos to fetch.
     * 
    **/
    orderBy?: Enumerable<PedidosProdutosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PedidosProdutos.
     * 
    **/
    cursor?: PedidosProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PedidosProdutos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PedidosProdutos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PedidosProdutosScalarFieldEnum>
  }


  /**
   * PedidosProdutos create
   */
  export type PedidosProdutosCreateArgs = {
    /**
     * Select specific fields to fetch from the PedidosProdutos
     * 
    **/
    select?: PedidosProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidosProdutosInclude | null
    /**
     * The data needed to create a PedidosProdutos.
     * 
    **/
    data: XOR<PedidosProdutosCreateInput, PedidosProdutosUncheckedCreateInput>
  }


  /**
   * PedidosProdutos createMany
   */
  export type PedidosProdutosCreateManyArgs = {
    /**
     * The data used to create many PedidosProdutos.
     * 
    **/
    data: Enumerable<PedidosProdutosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * PedidosProdutos update
   */
  export type PedidosProdutosUpdateArgs = {
    /**
     * Select specific fields to fetch from the PedidosProdutos
     * 
    **/
    select?: PedidosProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidosProdutosInclude | null
    /**
     * The data needed to update a PedidosProdutos.
     * 
    **/
    data: XOR<PedidosProdutosUpdateInput, PedidosProdutosUncheckedUpdateInput>
    /**
     * Choose, which PedidosProdutos to update.
     * 
    **/
    where: PedidosProdutosWhereUniqueInput
  }


  /**
   * PedidosProdutos updateMany
   */
  export type PedidosProdutosUpdateManyArgs = {
    /**
     * The data used to update PedidosProdutos.
     * 
    **/
    data: XOR<PedidosProdutosUpdateManyMutationInput, PedidosProdutosUncheckedUpdateManyInput>
    /**
     * Filter which PedidosProdutos to update
     * 
    **/
    where?: PedidosProdutosWhereInput
  }


  /**
   * PedidosProdutos upsert
   */
  export type PedidosProdutosUpsertArgs = {
    /**
     * Select specific fields to fetch from the PedidosProdutos
     * 
    **/
    select?: PedidosProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidosProdutosInclude | null
    /**
     * The filter to search for the PedidosProdutos to update in case it exists.
     * 
    **/
    where: PedidosProdutosWhereUniqueInput
    /**
     * In case the PedidosProdutos found by the `where` argument doesn't exist, create a new PedidosProdutos with this data.
     * 
    **/
    create: XOR<PedidosProdutosCreateInput, PedidosProdutosUncheckedCreateInput>
    /**
     * In case the PedidosProdutos was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PedidosProdutosUpdateInput, PedidosProdutosUncheckedUpdateInput>
  }


  /**
   * PedidosProdutos delete
   */
  export type PedidosProdutosDeleteArgs = {
    /**
     * Select specific fields to fetch from the PedidosProdutos
     * 
    **/
    select?: PedidosProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidosProdutosInclude | null
    /**
     * Filter which PedidosProdutos to delete.
     * 
    **/
    where: PedidosProdutosWhereUniqueInput
  }


  /**
   * PedidosProdutos deleteMany
   */
  export type PedidosProdutosDeleteManyArgs = {
    /**
     * Filter which PedidosProdutos to delete
     * 
    **/
    where?: PedidosProdutosWhereInput
  }


  /**
   * PedidosProdutos: findUniqueOrThrow
   */
  export type PedidosProdutosFindUniqueOrThrowArgs = PedidosProdutosFindUniqueArgsBase
      

  /**
   * PedidosProdutos: findFirstOrThrow
   */
  export type PedidosProdutosFindFirstOrThrowArgs = PedidosProdutosFindFirstArgsBase
      

  /**
   * PedidosProdutos without action
   */
  export type PedidosProdutosArgs = {
    /**
     * Select specific fields to fetch from the PedidosProdutos
     * 
    **/
    select?: PedidosProdutosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PedidosProdutosInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const EnderecosScalarFieldEnum: {
    id: 'id',
    logradouro: 'logradouro',
    cep: 'cep',
    numero: 'numero',
    bairro: 'bairro',
    complemento: 'complemento',
    cidades: 'cidades',
    estado: 'estado',
    usuarioId: 'usuarioId'
  };

  export type EnderecosScalarFieldEnum = (typeof EnderecosScalarFieldEnum)[keyof typeof EnderecosScalarFieldEnum]


  export const PedidosProdutosScalarFieldEnum: {
    id: 'id',
    idProduto: 'idProduto',
    idPedido: 'idPedido'
  };

  export type PedidosProdutosScalarFieldEnum = (typeof PedidosProdutosScalarFieldEnum)[keyof typeof PedidosProdutosScalarFieldEnum]


  export const PedidosScalarFieldEnum: {
    id: 'id',
    quantidadeProdutos: 'quantidadeProdutos',
    numerodoPedido: 'numerodoPedido'
  };

  export type PedidosScalarFieldEnum = (typeof PedidosScalarFieldEnum)[keyof typeof PedidosScalarFieldEnum]


  export const ProdutosScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    descricao: 'descricao',
    tipo: 'tipo',
    validade: 'validade',
    garantia: 'garantia',
    preco: 'preco'
  };

  export type ProdutosScalarFieldEnum = (typeof ProdutosScalarFieldEnum)[keyof typeof ProdutosScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuariosScalarFieldEnum: {
    id: 'id',
    nomeCompleto: 'nomeCompleto',
    email: 'email',
    senha: 'senha',
    telefone: 'telefone',
    cpf: 'cpf',
    dataNascimento: 'dataNascimento'
  };

  export type UsuariosScalarFieldEnum = (typeof UsuariosScalarFieldEnum)[keyof typeof UsuariosScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type usuariosWhereInput = {
    AND?: Enumerable<usuariosWhereInput>
    OR?: Enumerable<usuariosWhereInput>
    NOT?: Enumerable<usuariosWhereInput>
    id?: IntFilter | number
    nomeCompleto?: StringFilter | string
    email?: StringNullableFilter | string | null
    senha?: StringNullableFilter | string | null
    telefone?: StringNullableFilter | string | null
    cpf?: StringNullableFilter | string | null
    dataNascimento?: DateTimeNullableFilter | Date | string | null
    enderecos?: EnderecosListRelationFilter
  }

  export type usuariosOrderByWithRelationInput = {
    id?: SortOrder
    nomeCompleto?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    telefone?: SortOrder
    cpf?: SortOrder
    dataNascimento?: SortOrder
    enderecos?: enderecosOrderByRelationAggregateInput
  }

  export type usuariosWhereUniqueInput = {
    id?: number
    email?: string
    cpf?: string
  }

  export type usuariosOrderByWithAggregationInput = {
    id?: SortOrder
    nomeCompleto?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    telefone?: SortOrder
    cpf?: SortOrder
    dataNascimento?: SortOrder
    _count?: usuariosCountOrderByAggregateInput
    _avg?: usuariosAvgOrderByAggregateInput
    _max?: usuariosMaxOrderByAggregateInput
    _min?: usuariosMinOrderByAggregateInput
    _sum?: usuariosSumOrderByAggregateInput
  }

  export type usuariosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usuariosScalarWhereWithAggregatesInput>
    OR?: Enumerable<usuariosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usuariosScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nomeCompleto?: StringWithAggregatesFilter | string
    email?: StringNullableWithAggregatesFilter | string | null
    senha?: StringNullableWithAggregatesFilter | string | null
    telefone?: StringNullableWithAggregatesFilter | string | null
    cpf?: StringNullableWithAggregatesFilter | string | null
    dataNascimento?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type enderecosWhereInput = {
    AND?: Enumerable<enderecosWhereInput>
    OR?: Enumerable<enderecosWhereInput>
    NOT?: Enumerable<enderecosWhereInput>
    id?: IntFilter | number
    logradouro?: StringFilter | string
    cep?: StringNullableFilter | string | null
    numero?: IntFilter | number
    bairro?: StringNullableFilter | string | null
    complemento?: StringNullableFilter | string | null
    cidades?: StringNullableFilter | string | null
    estado?: StringNullableFilter | string | null
    usuario?: XOR<UsuariosRelationFilter, usuariosWhereInput>
    usuarioId?: IntFilter | number
  }

  export type enderecosOrderByWithRelationInput = {
    id?: SortOrder
    logradouro?: SortOrder
    cep?: SortOrder
    numero?: SortOrder
    bairro?: SortOrder
    complemento?: SortOrder
    cidades?: SortOrder
    estado?: SortOrder
    usuario?: usuariosOrderByWithRelationInput
    usuarioId?: SortOrder
  }

  export type enderecosWhereUniqueInput = {
    id?: number
  }

  export type enderecosOrderByWithAggregationInput = {
    id?: SortOrder
    logradouro?: SortOrder
    cep?: SortOrder
    numero?: SortOrder
    bairro?: SortOrder
    complemento?: SortOrder
    cidades?: SortOrder
    estado?: SortOrder
    usuarioId?: SortOrder
    _count?: enderecosCountOrderByAggregateInput
    _avg?: enderecosAvgOrderByAggregateInput
    _max?: enderecosMaxOrderByAggregateInput
    _min?: enderecosMinOrderByAggregateInput
    _sum?: enderecosSumOrderByAggregateInput
  }

  export type enderecosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<enderecosScalarWhereWithAggregatesInput>
    OR?: Enumerable<enderecosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<enderecosScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    logradouro?: StringWithAggregatesFilter | string
    cep?: StringNullableWithAggregatesFilter | string | null
    numero?: IntWithAggregatesFilter | number
    bairro?: StringNullableWithAggregatesFilter | string | null
    complemento?: StringNullableWithAggregatesFilter | string | null
    cidades?: StringNullableWithAggregatesFilter | string | null
    estado?: StringNullableWithAggregatesFilter | string | null
    usuarioId?: IntWithAggregatesFilter | number
  }

  export type pedidosWhereInput = {
    AND?: Enumerable<pedidosWhereInput>
    OR?: Enumerable<pedidosWhereInput>
    NOT?: Enumerable<pedidosWhereInput>
    id?: IntFilter | number
    quantidadeProdutos?: IntFilter | number
    numerodoPedido?: IntFilter | number
    produtos?: PedidosProdutosListRelationFilter
  }

  export type pedidosOrderByWithRelationInput = {
    id?: SortOrder
    quantidadeProdutos?: SortOrder
    numerodoPedido?: SortOrder
    produtos?: PedidosProdutosOrderByRelationAggregateInput
  }

  export type pedidosWhereUniqueInput = {
    id?: number
  }

  export type pedidosOrderByWithAggregationInput = {
    id?: SortOrder
    quantidadeProdutos?: SortOrder
    numerodoPedido?: SortOrder
    _count?: pedidosCountOrderByAggregateInput
    _avg?: pedidosAvgOrderByAggregateInput
    _max?: pedidosMaxOrderByAggregateInput
    _min?: pedidosMinOrderByAggregateInput
    _sum?: pedidosSumOrderByAggregateInput
  }

  export type pedidosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<pedidosScalarWhereWithAggregatesInput>
    OR?: Enumerable<pedidosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<pedidosScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    quantidadeProdutos?: IntWithAggregatesFilter | number
    numerodoPedido?: IntWithAggregatesFilter | number
  }

  export type produtosWhereInput = {
    AND?: Enumerable<produtosWhereInput>
    OR?: Enumerable<produtosWhereInput>
    NOT?: Enumerable<produtosWhereInput>
    id?: IntFilter | number
    nome?: StringFilter | string
    descricao?: StringNullableFilter | string | null
    tipo?: StringNullableFilter | string | null
    validade?: DateTimeNullableFilter | Date | string | null
    garantia?: StringNullableFilter | string | null
    preco?: FloatNullableFilter | number | null
    pedidos?: PedidosProdutosListRelationFilter
  }

  export type produtosOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    tipo?: SortOrder
    validade?: SortOrder
    garantia?: SortOrder
    preco?: SortOrder
    pedidos?: PedidosProdutosOrderByRelationAggregateInput
  }

  export type produtosWhereUniqueInput = {
    id?: number
  }

  export type produtosOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    tipo?: SortOrder
    validade?: SortOrder
    garantia?: SortOrder
    preco?: SortOrder
    _count?: produtosCountOrderByAggregateInput
    _avg?: produtosAvgOrderByAggregateInput
    _max?: produtosMaxOrderByAggregateInput
    _min?: produtosMinOrderByAggregateInput
    _sum?: produtosSumOrderByAggregateInput
  }

  export type produtosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<produtosScalarWhereWithAggregatesInput>
    OR?: Enumerable<produtosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<produtosScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nome?: StringWithAggregatesFilter | string
    descricao?: StringNullableWithAggregatesFilter | string | null
    tipo?: StringNullableWithAggregatesFilter | string | null
    validade?: DateTimeNullableWithAggregatesFilter | Date | string | null
    garantia?: StringNullableWithAggregatesFilter | string | null
    preco?: FloatNullableWithAggregatesFilter | number | null
  }

  export type PedidosProdutosWhereInput = {
    AND?: Enumerable<PedidosProdutosWhereInput>
    OR?: Enumerable<PedidosProdutosWhereInput>
    NOT?: Enumerable<PedidosProdutosWhereInput>
    id?: IntFilter | number
    idProduto?: IntFilter | number
    idPedido?: IntFilter | number
    produto?: XOR<ProdutosRelationFilter, produtosWhereInput>
    pedido?: XOR<PedidosRelationFilter, pedidosWhereInput>
  }

  export type PedidosProdutosOrderByWithRelationInput = {
    id?: SortOrder
    idProduto?: SortOrder
    idPedido?: SortOrder
    produto?: produtosOrderByWithRelationInput
    pedido?: pedidosOrderByWithRelationInput
  }

  export type PedidosProdutosWhereUniqueInput = {
    id?: number
  }

  export type PedidosProdutosOrderByWithAggregationInput = {
    id?: SortOrder
    idProduto?: SortOrder
    idPedido?: SortOrder
    _count?: PedidosProdutosCountOrderByAggregateInput
    _avg?: PedidosProdutosAvgOrderByAggregateInput
    _max?: PedidosProdutosMaxOrderByAggregateInput
    _min?: PedidosProdutosMinOrderByAggregateInput
    _sum?: PedidosProdutosSumOrderByAggregateInput
  }

  export type PedidosProdutosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PedidosProdutosScalarWhereWithAggregatesInput>
    OR?: Enumerable<PedidosProdutosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PedidosProdutosScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    idProduto?: IntWithAggregatesFilter | number
    idPedido?: IntWithAggregatesFilter | number
  }

  export type usuariosCreateInput = {
    nomeCompleto: string
    email?: string | null
    senha?: string | null
    telefone?: string | null
    cpf?: string | null
    dataNascimento?: Date | string | null
    enderecos?: enderecosCreateNestedManyWithoutUsuarioInput
  }

  export type usuariosUncheckedCreateInput = {
    id?: number
    nomeCompleto: string
    email?: string | null
    senha?: string | null
    telefone?: string | null
    cpf?: string | null
    dataNascimento?: Date | string | null
    enderecos?: enderecosUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuariosUpdateInput = {
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    enderecos?: enderecosUpdateManyWithoutUsuarioNestedInput
  }

  export type usuariosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    enderecos?: enderecosUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type usuariosCreateManyInput = {
    id?: number
    nomeCompleto: string
    email?: string | null
    senha?: string | null
    telefone?: string | null
    cpf?: string | null
    dataNascimento?: Date | string | null
  }

  export type usuariosUpdateManyMutationInput = {
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usuariosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type enderecosCreateInput = {
    logradouro: string
    cep?: string | null
    numero: number
    bairro?: string | null
    complemento?: string | null
    cidades?: string | null
    estado?: string | null
    usuario: usuariosCreateNestedOneWithoutEnderecosInput
  }

  export type enderecosUncheckedCreateInput = {
    id?: number
    logradouro: string
    cep?: string | null
    numero: number
    bairro?: string | null
    complemento?: string | null
    cidades?: string | null
    estado?: string | null
    usuarioId: number
  }

  export type enderecosUpdateInput = {
    logradouro?: StringFieldUpdateOperationsInput | string
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: IntFieldUpdateOperationsInput | number
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cidades?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    usuario?: usuariosUpdateOneRequiredWithoutEnderecosNestedInput
  }

  export type enderecosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    logradouro?: StringFieldUpdateOperationsInput | string
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: IntFieldUpdateOperationsInput | number
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cidades?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type enderecosCreateManyInput = {
    id?: number
    logradouro: string
    cep?: string | null
    numero: number
    bairro?: string | null
    complemento?: string | null
    cidades?: string | null
    estado?: string | null
    usuarioId: number
  }

  export type enderecosUpdateManyMutationInput = {
    logradouro?: StringFieldUpdateOperationsInput | string
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: IntFieldUpdateOperationsInput | number
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cidades?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type enderecosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    logradouro?: StringFieldUpdateOperationsInput | string
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: IntFieldUpdateOperationsInput | number
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cidades?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type pedidosCreateInput = {
    quantidadeProdutos: number
    numerodoPedido: number
    produtos?: PedidosProdutosCreateNestedManyWithoutPedidoInput
  }

  export type pedidosUncheckedCreateInput = {
    id?: number
    quantidadeProdutos: number
    numerodoPedido: number
    produtos?: PedidosProdutosUncheckedCreateNestedManyWithoutPedidoInput
  }

  export type pedidosUpdateInput = {
    quantidadeProdutos?: IntFieldUpdateOperationsInput | number
    numerodoPedido?: IntFieldUpdateOperationsInput | number
    produtos?: PedidosProdutosUpdateManyWithoutPedidoNestedInput
  }

  export type pedidosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantidadeProdutos?: IntFieldUpdateOperationsInput | number
    numerodoPedido?: IntFieldUpdateOperationsInput | number
    produtos?: PedidosProdutosUncheckedUpdateManyWithoutPedidoNestedInput
  }

  export type pedidosCreateManyInput = {
    id?: number
    quantidadeProdutos: number
    numerodoPedido: number
  }

  export type pedidosUpdateManyMutationInput = {
    quantidadeProdutos?: IntFieldUpdateOperationsInput | number
    numerodoPedido?: IntFieldUpdateOperationsInput | number
  }

  export type pedidosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantidadeProdutos?: IntFieldUpdateOperationsInput | number
    numerodoPedido?: IntFieldUpdateOperationsInput | number
  }

  export type produtosCreateInput = {
    nome: string
    descricao?: string | null
    tipo?: string | null
    validade?: Date | string | null
    garantia?: string | null
    preco?: number | null
    pedidos?: PedidosProdutosCreateNestedManyWithoutProdutoInput
  }

  export type produtosUncheckedCreateInput = {
    id?: number
    nome: string
    descricao?: string | null
    tipo?: string | null
    validade?: Date | string | null
    garantia?: string | null
    preco?: number | null
    pedidos?: PedidosProdutosUncheckedCreateNestedManyWithoutProdutoInput
  }

  export type produtosUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: NullableStringFieldUpdateOperationsInput | string | null
    validade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    garantia?: NullableStringFieldUpdateOperationsInput | string | null
    preco?: NullableFloatFieldUpdateOperationsInput | number | null
    pedidos?: PedidosProdutosUpdateManyWithoutProdutoNestedInput
  }

  export type produtosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: NullableStringFieldUpdateOperationsInput | string | null
    validade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    garantia?: NullableStringFieldUpdateOperationsInput | string | null
    preco?: NullableFloatFieldUpdateOperationsInput | number | null
    pedidos?: PedidosProdutosUncheckedUpdateManyWithoutProdutoNestedInput
  }

  export type produtosCreateManyInput = {
    id?: number
    nome: string
    descricao?: string | null
    tipo?: string | null
    validade?: Date | string | null
    garantia?: string | null
    preco?: number | null
  }

  export type produtosUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: NullableStringFieldUpdateOperationsInput | string | null
    validade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    garantia?: NullableStringFieldUpdateOperationsInput | string | null
    preco?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type produtosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: NullableStringFieldUpdateOperationsInput | string | null
    validade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    garantia?: NullableStringFieldUpdateOperationsInput | string | null
    preco?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type PedidosProdutosCreateInput = {
    produto: produtosCreateNestedOneWithoutPedidosInput
    pedido: pedidosCreateNestedOneWithoutProdutosInput
  }

  export type PedidosProdutosUncheckedCreateInput = {
    id?: number
    idProduto: number
    idPedido: number
  }

  export type PedidosProdutosUpdateInput = {
    produto?: produtosUpdateOneRequiredWithoutPedidosNestedInput
    pedido?: pedidosUpdateOneRequiredWithoutProdutosNestedInput
  }

  export type PedidosProdutosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    idProduto?: IntFieldUpdateOperationsInput | number
    idPedido?: IntFieldUpdateOperationsInput | number
  }

  export type PedidosProdutosCreateManyInput = {
    id?: number
    idProduto: number
    idPedido: number
  }

  export type PedidosProdutosUpdateManyMutationInput = {

  }

  export type PedidosProdutosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    idProduto?: IntFieldUpdateOperationsInput | number
    idPedido?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type EnderecosListRelationFilter = {
    every?: enderecosWhereInput
    some?: enderecosWhereInput
    none?: enderecosWhereInput
  }

  export type enderecosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usuariosCountOrderByAggregateInput = {
    id?: SortOrder
    nomeCompleto?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    telefone?: SortOrder
    cpf?: SortOrder
    dataNascimento?: SortOrder
  }

  export type usuariosAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usuariosMaxOrderByAggregateInput = {
    id?: SortOrder
    nomeCompleto?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    telefone?: SortOrder
    cpf?: SortOrder
    dataNascimento?: SortOrder
  }

  export type usuariosMinOrderByAggregateInput = {
    id?: SortOrder
    nomeCompleto?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    telefone?: SortOrder
    cpf?: SortOrder
    dataNascimento?: SortOrder
  }

  export type usuariosSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type UsuariosRelationFilter = {
    is?: usuariosWhereInput
    isNot?: usuariosWhereInput
  }

  export type enderecosCountOrderByAggregateInput = {
    id?: SortOrder
    logradouro?: SortOrder
    cep?: SortOrder
    numero?: SortOrder
    bairro?: SortOrder
    complemento?: SortOrder
    cidades?: SortOrder
    estado?: SortOrder
    usuarioId?: SortOrder
  }

  export type enderecosAvgOrderByAggregateInput = {
    id?: SortOrder
    numero?: SortOrder
    usuarioId?: SortOrder
  }

  export type enderecosMaxOrderByAggregateInput = {
    id?: SortOrder
    logradouro?: SortOrder
    cep?: SortOrder
    numero?: SortOrder
    bairro?: SortOrder
    complemento?: SortOrder
    cidades?: SortOrder
    estado?: SortOrder
    usuarioId?: SortOrder
  }

  export type enderecosMinOrderByAggregateInput = {
    id?: SortOrder
    logradouro?: SortOrder
    cep?: SortOrder
    numero?: SortOrder
    bairro?: SortOrder
    complemento?: SortOrder
    cidades?: SortOrder
    estado?: SortOrder
    usuarioId?: SortOrder
  }

  export type enderecosSumOrderByAggregateInput = {
    id?: SortOrder
    numero?: SortOrder
    usuarioId?: SortOrder
  }

  export type PedidosProdutosListRelationFilter = {
    every?: PedidosProdutosWhereInput
    some?: PedidosProdutosWhereInput
    none?: PedidosProdutosWhereInput
  }

  export type PedidosProdutosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type pedidosCountOrderByAggregateInput = {
    id?: SortOrder
    quantidadeProdutos?: SortOrder
    numerodoPedido?: SortOrder
  }

  export type pedidosAvgOrderByAggregateInput = {
    id?: SortOrder
    quantidadeProdutos?: SortOrder
    numerodoPedido?: SortOrder
  }

  export type pedidosMaxOrderByAggregateInput = {
    id?: SortOrder
    quantidadeProdutos?: SortOrder
    numerodoPedido?: SortOrder
  }

  export type pedidosMinOrderByAggregateInput = {
    id?: SortOrder
    quantidadeProdutos?: SortOrder
    numerodoPedido?: SortOrder
  }

  export type pedidosSumOrderByAggregateInput = {
    id?: SortOrder
    quantidadeProdutos?: SortOrder
    numerodoPedido?: SortOrder
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type produtosCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    tipo?: SortOrder
    validade?: SortOrder
    garantia?: SortOrder
    preco?: SortOrder
  }

  export type produtosAvgOrderByAggregateInput = {
    id?: SortOrder
    preco?: SortOrder
  }

  export type produtosMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    tipo?: SortOrder
    validade?: SortOrder
    garantia?: SortOrder
    preco?: SortOrder
  }

  export type produtosMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    tipo?: SortOrder
    validade?: SortOrder
    garantia?: SortOrder
    preco?: SortOrder
  }

  export type produtosSumOrderByAggregateInput = {
    id?: SortOrder
    preco?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type ProdutosRelationFilter = {
    is?: produtosWhereInput
    isNot?: produtosWhereInput
  }

  export type PedidosRelationFilter = {
    is?: pedidosWhereInput
    isNot?: pedidosWhereInput
  }

  export type PedidosProdutosCountOrderByAggregateInput = {
    id?: SortOrder
    idProduto?: SortOrder
    idPedido?: SortOrder
  }

  export type PedidosProdutosAvgOrderByAggregateInput = {
    id?: SortOrder
    idProduto?: SortOrder
    idPedido?: SortOrder
  }

  export type PedidosProdutosMaxOrderByAggregateInput = {
    id?: SortOrder
    idProduto?: SortOrder
    idPedido?: SortOrder
  }

  export type PedidosProdutosMinOrderByAggregateInput = {
    id?: SortOrder
    idProduto?: SortOrder
    idPedido?: SortOrder
  }

  export type PedidosProdutosSumOrderByAggregateInput = {
    id?: SortOrder
    idProduto?: SortOrder
    idPedido?: SortOrder
  }

  export type enderecosCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<Enumerable<enderecosCreateWithoutUsuarioInput>, Enumerable<enderecosUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<enderecosCreateOrConnectWithoutUsuarioInput>
    createMany?: enderecosCreateManyUsuarioInputEnvelope
    connect?: Enumerable<enderecosWhereUniqueInput>
  }

  export type enderecosUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<Enumerable<enderecosCreateWithoutUsuarioInput>, Enumerable<enderecosUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<enderecosCreateOrConnectWithoutUsuarioInput>
    createMany?: enderecosCreateManyUsuarioInputEnvelope
    connect?: Enumerable<enderecosWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type enderecosUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<Enumerable<enderecosCreateWithoutUsuarioInput>, Enumerable<enderecosUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<enderecosCreateOrConnectWithoutUsuarioInput>
    upsert?: Enumerable<enderecosUpsertWithWhereUniqueWithoutUsuarioInput>
    createMany?: enderecosCreateManyUsuarioInputEnvelope
    set?: Enumerable<enderecosWhereUniqueInput>
    disconnect?: Enumerable<enderecosWhereUniqueInput>
    delete?: Enumerable<enderecosWhereUniqueInput>
    connect?: Enumerable<enderecosWhereUniqueInput>
    update?: Enumerable<enderecosUpdateWithWhereUniqueWithoutUsuarioInput>
    updateMany?: Enumerable<enderecosUpdateManyWithWhereWithoutUsuarioInput>
    deleteMany?: Enumerable<enderecosScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type enderecosUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<Enumerable<enderecosCreateWithoutUsuarioInput>, Enumerable<enderecosUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<enderecosCreateOrConnectWithoutUsuarioInput>
    upsert?: Enumerable<enderecosUpsertWithWhereUniqueWithoutUsuarioInput>
    createMany?: enderecosCreateManyUsuarioInputEnvelope
    set?: Enumerable<enderecosWhereUniqueInput>
    disconnect?: Enumerable<enderecosWhereUniqueInput>
    delete?: Enumerable<enderecosWhereUniqueInput>
    connect?: Enumerable<enderecosWhereUniqueInput>
    update?: Enumerable<enderecosUpdateWithWhereUniqueWithoutUsuarioInput>
    updateMany?: Enumerable<enderecosUpdateManyWithWhereWithoutUsuarioInput>
    deleteMany?: Enumerable<enderecosScalarWhereInput>
  }

  export type usuariosCreateNestedOneWithoutEnderecosInput = {
    create?: XOR<usuariosCreateWithoutEnderecosInput, usuariosUncheckedCreateWithoutEnderecosInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutEnderecosInput
    connect?: usuariosWhereUniqueInput
  }

  export type usuariosUpdateOneRequiredWithoutEnderecosNestedInput = {
    create?: XOR<usuariosCreateWithoutEnderecosInput, usuariosUncheckedCreateWithoutEnderecosInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutEnderecosInput
    upsert?: usuariosUpsertWithoutEnderecosInput
    connect?: usuariosWhereUniqueInput
    update?: XOR<usuariosUpdateWithoutEnderecosInput, usuariosUncheckedUpdateWithoutEnderecosInput>
  }

  export type PedidosProdutosCreateNestedManyWithoutPedidoInput = {
    create?: XOR<Enumerable<PedidosProdutosCreateWithoutPedidoInput>, Enumerable<PedidosProdutosUncheckedCreateWithoutPedidoInput>>
    connectOrCreate?: Enumerable<PedidosProdutosCreateOrConnectWithoutPedidoInput>
    createMany?: PedidosProdutosCreateManyPedidoInputEnvelope
    connect?: Enumerable<PedidosProdutosWhereUniqueInput>
  }

  export type PedidosProdutosUncheckedCreateNestedManyWithoutPedidoInput = {
    create?: XOR<Enumerable<PedidosProdutosCreateWithoutPedidoInput>, Enumerable<PedidosProdutosUncheckedCreateWithoutPedidoInput>>
    connectOrCreate?: Enumerable<PedidosProdutosCreateOrConnectWithoutPedidoInput>
    createMany?: PedidosProdutosCreateManyPedidoInputEnvelope
    connect?: Enumerable<PedidosProdutosWhereUniqueInput>
  }

  export type PedidosProdutosUpdateManyWithoutPedidoNestedInput = {
    create?: XOR<Enumerable<PedidosProdutosCreateWithoutPedidoInput>, Enumerable<PedidosProdutosUncheckedCreateWithoutPedidoInput>>
    connectOrCreate?: Enumerable<PedidosProdutosCreateOrConnectWithoutPedidoInput>
    upsert?: Enumerable<PedidosProdutosUpsertWithWhereUniqueWithoutPedidoInput>
    createMany?: PedidosProdutosCreateManyPedidoInputEnvelope
    set?: Enumerable<PedidosProdutosWhereUniqueInput>
    disconnect?: Enumerable<PedidosProdutosWhereUniqueInput>
    delete?: Enumerable<PedidosProdutosWhereUniqueInput>
    connect?: Enumerable<PedidosProdutosWhereUniqueInput>
    update?: Enumerable<PedidosProdutosUpdateWithWhereUniqueWithoutPedidoInput>
    updateMany?: Enumerable<PedidosProdutosUpdateManyWithWhereWithoutPedidoInput>
    deleteMany?: Enumerable<PedidosProdutosScalarWhereInput>
  }

  export type PedidosProdutosUncheckedUpdateManyWithoutPedidoNestedInput = {
    create?: XOR<Enumerable<PedidosProdutosCreateWithoutPedidoInput>, Enumerable<PedidosProdutosUncheckedCreateWithoutPedidoInput>>
    connectOrCreate?: Enumerable<PedidosProdutosCreateOrConnectWithoutPedidoInput>
    upsert?: Enumerable<PedidosProdutosUpsertWithWhereUniqueWithoutPedidoInput>
    createMany?: PedidosProdutosCreateManyPedidoInputEnvelope
    set?: Enumerable<PedidosProdutosWhereUniqueInput>
    disconnect?: Enumerable<PedidosProdutosWhereUniqueInput>
    delete?: Enumerable<PedidosProdutosWhereUniqueInput>
    connect?: Enumerable<PedidosProdutosWhereUniqueInput>
    update?: Enumerable<PedidosProdutosUpdateWithWhereUniqueWithoutPedidoInput>
    updateMany?: Enumerable<PedidosProdutosUpdateManyWithWhereWithoutPedidoInput>
    deleteMany?: Enumerable<PedidosProdutosScalarWhereInput>
  }

  export type PedidosProdutosCreateNestedManyWithoutProdutoInput = {
    create?: XOR<Enumerable<PedidosProdutosCreateWithoutProdutoInput>, Enumerable<PedidosProdutosUncheckedCreateWithoutProdutoInput>>
    connectOrCreate?: Enumerable<PedidosProdutosCreateOrConnectWithoutProdutoInput>
    createMany?: PedidosProdutosCreateManyProdutoInputEnvelope
    connect?: Enumerable<PedidosProdutosWhereUniqueInput>
  }

  export type PedidosProdutosUncheckedCreateNestedManyWithoutProdutoInput = {
    create?: XOR<Enumerable<PedidosProdutosCreateWithoutProdutoInput>, Enumerable<PedidosProdutosUncheckedCreateWithoutProdutoInput>>
    connectOrCreate?: Enumerable<PedidosProdutosCreateOrConnectWithoutProdutoInput>
    createMany?: PedidosProdutosCreateManyProdutoInputEnvelope
    connect?: Enumerable<PedidosProdutosWhereUniqueInput>
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PedidosProdutosUpdateManyWithoutProdutoNestedInput = {
    create?: XOR<Enumerable<PedidosProdutosCreateWithoutProdutoInput>, Enumerable<PedidosProdutosUncheckedCreateWithoutProdutoInput>>
    connectOrCreate?: Enumerable<PedidosProdutosCreateOrConnectWithoutProdutoInput>
    upsert?: Enumerable<PedidosProdutosUpsertWithWhereUniqueWithoutProdutoInput>
    createMany?: PedidosProdutosCreateManyProdutoInputEnvelope
    set?: Enumerable<PedidosProdutosWhereUniqueInput>
    disconnect?: Enumerable<PedidosProdutosWhereUniqueInput>
    delete?: Enumerable<PedidosProdutosWhereUniqueInput>
    connect?: Enumerable<PedidosProdutosWhereUniqueInput>
    update?: Enumerable<PedidosProdutosUpdateWithWhereUniqueWithoutProdutoInput>
    updateMany?: Enumerable<PedidosProdutosUpdateManyWithWhereWithoutProdutoInput>
    deleteMany?: Enumerable<PedidosProdutosScalarWhereInput>
  }

  export type PedidosProdutosUncheckedUpdateManyWithoutProdutoNestedInput = {
    create?: XOR<Enumerable<PedidosProdutosCreateWithoutProdutoInput>, Enumerable<PedidosProdutosUncheckedCreateWithoutProdutoInput>>
    connectOrCreate?: Enumerable<PedidosProdutosCreateOrConnectWithoutProdutoInput>
    upsert?: Enumerable<PedidosProdutosUpsertWithWhereUniqueWithoutProdutoInput>
    createMany?: PedidosProdutosCreateManyProdutoInputEnvelope
    set?: Enumerable<PedidosProdutosWhereUniqueInput>
    disconnect?: Enumerable<PedidosProdutosWhereUniqueInput>
    delete?: Enumerable<PedidosProdutosWhereUniqueInput>
    connect?: Enumerable<PedidosProdutosWhereUniqueInput>
    update?: Enumerable<PedidosProdutosUpdateWithWhereUniqueWithoutProdutoInput>
    updateMany?: Enumerable<PedidosProdutosUpdateManyWithWhereWithoutProdutoInput>
    deleteMany?: Enumerable<PedidosProdutosScalarWhereInput>
  }

  export type produtosCreateNestedOneWithoutPedidosInput = {
    create?: XOR<produtosCreateWithoutPedidosInput, produtosUncheckedCreateWithoutPedidosInput>
    connectOrCreate?: produtosCreateOrConnectWithoutPedidosInput
    connect?: produtosWhereUniqueInput
  }

  export type pedidosCreateNestedOneWithoutProdutosInput = {
    create?: XOR<pedidosCreateWithoutProdutosInput, pedidosUncheckedCreateWithoutProdutosInput>
    connectOrCreate?: pedidosCreateOrConnectWithoutProdutosInput
    connect?: pedidosWhereUniqueInput
  }

  export type produtosUpdateOneRequiredWithoutPedidosNestedInput = {
    create?: XOR<produtosCreateWithoutPedidosInput, produtosUncheckedCreateWithoutPedidosInput>
    connectOrCreate?: produtosCreateOrConnectWithoutPedidosInput
    upsert?: produtosUpsertWithoutPedidosInput
    connect?: produtosWhereUniqueInput
    update?: XOR<produtosUpdateWithoutPedidosInput, produtosUncheckedUpdateWithoutPedidosInput>
  }

  export type pedidosUpdateOneRequiredWithoutProdutosNestedInput = {
    create?: XOR<pedidosCreateWithoutProdutosInput, pedidosUncheckedCreateWithoutProdutosInput>
    connectOrCreate?: pedidosCreateOrConnectWithoutProdutosInput
    upsert?: pedidosUpsertWithoutProdutosInput
    connect?: pedidosWhereUniqueInput
    update?: XOR<pedidosUpdateWithoutProdutosInput, pedidosUncheckedUpdateWithoutProdutosInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type enderecosCreateWithoutUsuarioInput = {
    logradouro: string
    cep?: string | null
    numero: number
    bairro?: string | null
    complemento?: string | null
    cidades?: string | null
    estado?: string | null
  }

  export type enderecosUncheckedCreateWithoutUsuarioInput = {
    id?: number
    logradouro: string
    cep?: string | null
    numero: number
    bairro?: string | null
    complemento?: string | null
    cidades?: string | null
    estado?: string | null
  }

  export type enderecosCreateOrConnectWithoutUsuarioInput = {
    where: enderecosWhereUniqueInput
    create: XOR<enderecosCreateWithoutUsuarioInput, enderecosUncheckedCreateWithoutUsuarioInput>
  }

  export type enderecosCreateManyUsuarioInputEnvelope = {
    data: Enumerable<enderecosCreateManyUsuarioInput>
    skipDuplicates?: boolean
  }

  export type enderecosUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: enderecosWhereUniqueInput
    update: XOR<enderecosUpdateWithoutUsuarioInput, enderecosUncheckedUpdateWithoutUsuarioInput>
    create: XOR<enderecosCreateWithoutUsuarioInput, enderecosUncheckedCreateWithoutUsuarioInput>
  }

  export type enderecosUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: enderecosWhereUniqueInput
    data: XOR<enderecosUpdateWithoutUsuarioInput, enderecosUncheckedUpdateWithoutUsuarioInput>
  }

  export type enderecosUpdateManyWithWhereWithoutUsuarioInput = {
    where: enderecosScalarWhereInput
    data: XOR<enderecosUpdateManyMutationInput, enderecosUncheckedUpdateManyWithoutEnderecosInput>
  }

  export type enderecosScalarWhereInput = {
    AND?: Enumerable<enderecosScalarWhereInput>
    OR?: Enumerable<enderecosScalarWhereInput>
    NOT?: Enumerable<enderecosScalarWhereInput>
    id?: IntFilter | number
    logradouro?: StringFilter | string
    cep?: StringNullableFilter | string | null
    numero?: IntFilter | number
    bairro?: StringNullableFilter | string | null
    complemento?: StringNullableFilter | string | null
    cidades?: StringNullableFilter | string | null
    estado?: StringNullableFilter | string | null
    usuarioId?: IntFilter | number
  }

  export type usuariosCreateWithoutEnderecosInput = {
    nomeCompleto: string
    email?: string | null
    senha?: string | null
    telefone?: string | null
    cpf?: string | null
    dataNascimento?: Date | string | null
  }

  export type usuariosUncheckedCreateWithoutEnderecosInput = {
    id?: number
    nomeCompleto: string
    email?: string | null
    senha?: string | null
    telefone?: string | null
    cpf?: string | null
    dataNascimento?: Date | string | null
  }

  export type usuariosCreateOrConnectWithoutEnderecosInput = {
    where: usuariosWhereUniqueInput
    create: XOR<usuariosCreateWithoutEnderecosInput, usuariosUncheckedCreateWithoutEnderecosInput>
  }

  export type usuariosUpsertWithoutEnderecosInput = {
    update: XOR<usuariosUpdateWithoutEnderecosInput, usuariosUncheckedUpdateWithoutEnderecosInput>
    create: XOR<usuariosCreateWithoutEnderecosInput, usuariosUncheckedCreateWithoutEnderecosInput>
  }

  export type usuariosUpdateWithoutEnderecosInput = {
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usuariosUncheckedUpdateWithoutEnderecosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PedidosProdutosCreateWithoutPedidoInput = {
    produto: produtosCreateNestedOneWithoutPedidosInput
  }

  export type PedidosProdutosUncheckedCreateWithoutPedidoInput = {
    id?: number
    idProduto: number
  }

  export type PedidosProdutosCreateOrConnectWithoutPedidoInput = {
    where: PedidosProdutosWhereUniqueInput
    create: XOR<PedidosProdutosCreateWithoutPedidoInput, PedidosProdutosUncheckedCreateWithoutPedidoInput>
  }

  export type PedidosProdutosCreateManyPedidoInputEnvelope = {
    data: Enumerable<PedidosProdutosCreateManyPedidoInput>
    skipDuplicates?: boolean
  }

  export type PedidosProdutosUpsertWithWhereUniqueWithoutPedidoInput = {
    where: PedidosProdutosWhereUniqueInput
    update: XOR<PedidosProdutosUpdateWithoutPedidoInput, PedidosProdutosUncheckedUpdateWithoutPedidoInput>
    create: XOR<PedidosProdutosCreateWithoutPedidoInput, PedidosProdutosUncheckedCreateWithoutPedidoInput>
  }

  export type PedidosProdutosUpdateWithWhereUniqueWithoutPedidoInput = {
    where: PedidosProdutosWhereUniqueInput
    data: XOR<PedidosProdutosUpdateWithoutPedidoInput, PedidosProdutosUncheckedUpdateWithoutPedidoInput>
  }

  export type PedidosProdutosUpdateManyWithWhereWithoutPedidoInput = {
    where: PedidosProdutosScalarWhereInput
    data: XOR<PedidosProdutosUpdateManyMutationInput, PedidosProdutosUncheckedUpdateManyWithoutProdutosInput>
  }

  export type PedidosProdutosScalarWhereInput = {
    AND?: Enumerable<PedidosProdutosScalarWhereInput>
    OR?: Enumerable<PedidosProdutosScalarWhereInput>
    NOT?: Enumerable<PedidosProdutosScalarWhereInput>
    id?: IntFilter | number
    idProduto?: IntFilter | number
    idPedido?: IntFilter | number
  }

  export type PedidosProdutosCreateWithoutProdutoInput = {
    pedido: pedidosCreateNestedOneWithoutProdutosInput
  }

  export type PedidosProdutosUncheckedCreateWithoutProdutoInput = {
    id?: number
    idPedido: number
  }

  export type PedidosProdutosCreateOrConnectWithoutProdutoInput = {
    where: PedidosProdutosWhereUniqueInput
    create: XOR<PedidosProdutosCreateWithoutProdutoInput, PedidosProdutosUncheckedCreateWithoutProdutoInput>
  }

  export type PedidosProdutosCreateManyProdutoInputEnvelope = {
    data: Enumerable<PedidosProdutosCreateManyProdutoInput>
    skipDuplicates?: boolean
  }

  export type PedidosProdutosUpsertWithWhereUniqueWithoutProdutoInput = {
    where: PedidosProdutosWhereUniqueInput
    update: XOR<PedidosProdutosUpdateWithoutProdutoInput, PedidosProdutosUncheckedUpdateWithoutProdutoInput>
    create: XOR<PedidosProdutosCreateWithoutProdutoInput, PedidosProdutosUncheckedCreateWithoutProdutoInput>
  }

  export type PedidosProdutosUpdateWithWhereUniqueWithoutProdutoInput = {
    where: PedidosProdutosWhereUniqueInput
    data: XOR<PedidosProdutosUpdateWithoutProdutoInput, PedidosProdutosUncheckedUpdateWithoutProdutoInput>
  }

  export type PedidosProdutosUpdateManyWithWhereWithoutProdutoInput = {
    where: PedidosProdutosScalarWhereInput
    data: XOR<PedidosProdutosUpdateManyMutationInput, PedidosProdutosUncheckedUpdateManyWithoutPedidosInput>
  }

  export type produtosCreateWithoutPedidosInput = {
    nome: string
    descricao?: string | null
    tipo?: string | null
    validade?: Date | string | null
    garantia?: string | null
    preco?: number | null
  }

  export type produtosUncheckedCreateWithoutPedidosInput = {
    id?: number
    nome: string
    descricao?: string | null
    tipo?: string | null
    validade?: Date | string | null
    garantia?: string | null
    preco?: number | null
  }

  export type produtosCreateOrConnectWithoutPedidosInput = {
    where: produtosWhereUniqueInput
    create: XOR<produtosCreateWithoutPedidosInput, produtosUncheckedCreateWithoutPedidosInput>
  }

  export type pedidosCreateWithoutProdutosInput = {
    quantidadeProdutos: number
    numerodoPedido: number
  }

  export type pedidosUncheckedCreateWithoutProdutosInput = {
    id?: number
    quantidadeProdutos: number
    numerodoPedido: number
  }

  export type pedidosCreateOrConnectWithoutProdutosInput = {
    where: pedidosWhereUniqueInput
    create: XOR<pedidosCreateWithoutProdutosInput, pedidosUncheckedCreateWithoutProdutosInput>
  }

  export type produtosUpsertWithoutPedidosInput = {
    update: XOR<produtosUpdateWithoutPedidosInput, produtosUncheckedUpdateWithoutPedidosInput>
    create: XOR<produtosCreateWithoutPedidosInput, produtosUncheckedCreateWithoutPedidosInput>
  }

  export type produtosUpdateWithoutPedidosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: NullableStringFieldUpdateOperationsInput | string | null
    validade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    garantia?: NullableStringFieldUpdateOperationsInput | string | null
    preco?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type produtosUncheckedUpdateWithoutPedidosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: NullableStringFieldUpdateOperationsInput | string | null
    validade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    garantia?: NullableStringFieldUpdateOperationsInput | string | null
    preco?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type pedidosUpsertWithoutProdutosInput = {
    update: XOR<pedidosUpdateWithoutProdutosInput, pedidosUncheckedUpdateWithoutProdutosInput>
    create: XOR<pedidosCreateWithoutProdutosInput, pedidosUncheckedCreateWithoutProdutosInput>
  }

  export type pedidosUpdateWithoutProdutosInput = {
    quantidadeProdutos?: IntFieldUpdateOperationsInput | number
    numerodoPedido?: IntFieldUpdateOperationsInput | number
  }

  export type pedidosUncheckedUpdateWithoutProdutosInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantidadeProdutos?: IntFieldUpdateOperationsInput | number
    numerodoPedido?: IntFieldUpdateOperationsInput | number
  }

  export type enderecosCreateManyUsuarioInput = {
    id?: number
    logradouro: string
    cep?: string | null
    numero: number
    bairro?: string | null
    complemento?: string | null
    cidades?: string | null
    estado?: string | null
  }

  export type enderecosUpdateWithoutUsuarioInput = {
    logradouro?: StringFieldUpdateOperationsInput | string
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: IntFieldUpdateOperationsInput | number
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cidades?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type enderecosUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    logradouro?: StringFieldUpdateOperationsInput | string
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: IntFieldUpdateOperationsInput | number
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cidades?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type enderecosUncheckedUpdateManyWithoutEnderecosInput = {
    id?: IntFieldUpdateOperationsInput | number
    logradouro?: StringFieldUpdateOperationsInput | string
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: IntFieldUpdateOperationsInput | number
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cidades?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PedidosProdutosCreateManyPedidoInput = {
    id?: number
    idProduto: number
  }

  export type PedidosProdutosUpdateWithoutPedidoInput = {
    produto?: produtosUpdateOneRequiredWithoutPedidosNestedInput
  }

  export type PedidosProdutosUncheckedUpdateWithoutPedidoInput = {
    id?: IntFieldUpdateOperationsInput | number
    idProduto?: IntFieldUpdateOperationsInput | number
  }

  export type PedidosProdutosUncheckedUpdateManyWithoutProdutosInput = {
    id?: IntFieldUpdateOperationsInput | number
    idProduto?: IntFieldUpdateOperationsInput | number
  }

  export type PedidosProdutosCreateManyProdutoInput = {
    id?: number
    idPedido: number
  }

  export type PedidosProdutosUpdateWithoutProdutoInput = {
    pedido?: pedidosUpdateOneRequiredWithoutProdutosNestedInput
  }

  export type PedidosProdutosUncheckedUpdateWithoutProdutoInput = {
    id?: IntFieldUpdateOperationsInput | number
    idPedido?: IntFieldUpdateOperationsInput | number
  }

  export type PedidosProdutosUncheckedUpdateManyWithoutPedidosInput = {
    id?: IntFieldUpdateOperationsInput | number
    idPedido?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}